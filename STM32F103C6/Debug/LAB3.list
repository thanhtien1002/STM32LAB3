
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c9c  08002c9c  00012c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc8  08002cc8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc8  08002cc8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc8  08002cc8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ccc  08002ccc  00012ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000060  08002d30  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08002d30  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dcb  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba4  00000000  00000000  00029e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f55  00000000  00000000  0002ce80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c569  00000000  00000000  00043dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008253d  00000000  00000000  0005033e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d287b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a64  00000000  00000000  000d28d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c84 	.word	0x08002c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002c84 	.word	0x08002c84

0800014c <isButtonPressed>:
int KeyReg3[NUM_OF_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int TimeForKeyPress =  500;
int button_flag[NUM_OF_BUTTON] = {0, 0, 0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000007c 	.word	0x2000007c

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000007c 	.word	0x2000007c

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_OF_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e063      	b.n	8000274 <getKeyInput+0xd4>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a35      	ldr	r2, [pc, #212]	; (8000284 <getKeyInput+0xe4>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4934      	ldr	r1, [pc, #208]	; (8000288 <getKeyInput+0xe8>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    KeyReg1[i] = KeyReg0[i];
 80001bc:	4a33      	ldr	r2, [pc, #204]	; (800028c <getKeyInput+0xec>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	492f      	ldr	r1, [pc, #188]	; (8000284 <getKeyInput+0xe4>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, buttonList[i]);
 80001cc:	4a30      	ldr	r2, [pc, #192]	; (8000290 <getKeyInput+0xf0>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	482e      	ldr	r0, [pc, #184]	; (8000294 <getKeyInput+0xf4>)
 80001da:	f001 fd13 	bl	8001c04 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a2a      	ldr	r2, [pc, #168]	; (800028c <getKeyInput+0xec>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001ea:	4a26      	ldr	r2, [pc, #152]	; (8000284 <getKeyInput+0xe4>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4926      	ldr	r1, [pc, #152]	; (800028c <getKeyInput+0xec>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d137      	bne.n	800026e <getKeyInput+0xce>
 80001fe:	4a21      	ldr	r2, [pc, #132]	; (8000284 <getKeyInput+0xe4>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4920      	ldr	r1, [pc, #128]	; (8000288 <getKeyInput+0xe8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d12d      	bne.n	800026e <getKeyInput+0xce>
		   if (KeyReg2[i] != KeyReg3[i]){
 8000212:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <getKeyInput+0xe8>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	491f      	ldr	r1, [pc, #124]	; (8000298 <getKeyInput+0xf8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d015      	beq.n	8000252 <getKeyInput+0xb2>
		      KeyReg3[i] = KeyReg2[i];
 8000226:	4a18      	ldr	r2, [pc, #96]	; (8000288 <getKeyInput+0xe8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	491a      	ldr	r1, [pc, #104]	; (8000298 <getKeyInput+0xf8>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		      if (KeyReg3[i] == PRESSED_STATE){
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <getKeyInput+0xf8>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d115      	bne.n	800026e <getKeyInput+0xce>
			     TimeForKeyPress = 500;
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <getKeyInput+0xfc>)
 8000244:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000248:	601a      	str	r2, [r3, #0]
			     subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff98 	bl	8000180 <subKeyProcess>
 8000250:	e00d      	b.n	800026e <getKeyInput+0xce>
		      }
		   } else {
			   	  TimeForKeyPress--;
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <getKeyInput+0xfc>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a10      	ldr	r2, [pc, #64]	; (800029c <getKeyInput+0xfc>)
 800025a:	6013      	str	r3, [r2, #0]
			      if (TimeForKeyPress == 0){
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <getKeyInput+0xfc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d104      	bne.n	800026e <getKeyInput+0xce>
			      KeyReg3[i] = NORMAL_STATE;
 8000264:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <getKeyInput+0xf8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2101      	movs	r1, #1
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<NUM_OF_BUTTON; i++){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3301      	adds	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b03      	cmp	r3, #3
 8000278:	dd98      	ble.n	80001ac <getKeyInput+0xc>
			      }
		     }
	    }
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000020 	.word	0x20000020
 8000288:	20000030 	.word	0x20000030
 800028c:	20000010 	.word	0x20000010
 8000290:	20000000 	.word	0x20000000
 8000294:	40010800 	.word	0x40010800
 8000298:	20000040 	.word	0x20000040
 800029c:	20000050 	.word	0x20000050

080002a0 <fsm_automatic>:

#include "fsm_automatic.h"

int led_buffer[2] = {0, 0};

void fsm_automatic(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if (mode == MODE1){
 80002a4:	4b9d      	ldr	r3, [pc, #628]	; (800051c <fsm_automatic+0x27c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	f040 817b 	bne.w	80005a4 <fsm_automatic+0x304>
		// AUTO MODE 1
		switch (statusAUTO1){
 80002ae:	4b9c      	ldr	r3, [pc, #624]	; (8000520 <fsm_automatic+0x280>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d86b      	bhi.n	800038e <fsm_automatic+0xee>
 80002b6:	a201      	add	r2, pc, #4	; (adr r2, 80002bc <fsm_automatic+0x1c>)
 80002b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002bc:	080002cd 	.word	0x080002cd
 80002c0:	080002db 	.word	0x080002db
 80002c4:	08000317 	.word	0x08000317
 80002c8:	08000353 	.word	0x08000353
			case INIT:
				statusAUTO1 = STATE_RED;
 80002cc:	4b94      	ldr	r3, [pc, #592]	; (8000520 <fsm_automatic+0x280>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 80002d2:	2064      	movs	r0, #100	; 0x64
 80002d4:	f000 fe8c 	bl	8000ff0 <setTimer1>
				break;
 80002d8:	e060      	b.n	800039c <fsm_automatic+0xfc>
			case STATE_RED:
				if (timer1_flag == 1){
 80002da:	4b92      	ldr	r3, [pc, #584]	; (8000524 <fsm_automatic+0x284>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d157      	bne.n	8000392 <fsm_automatic+0xf2>
					enableRed1();
 80002e2:	f001 f895 	bl	8001410 <enableRed1>
					led_buffer[0] = counterRed1;
 80002e6:	4b90      	ldr	r3, [pc, #576]	; (8000528 <fsm_automatic+0x288>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a90      	ldr	r2, [pc, #576]	; (800052c <fsm_automatic+0x28c>)
 80002ec:	6013      	str	r3, [r2, #0]
					counterRed1--;
 80002ee:	4b8e      	ldr	r3, [pc, #568]	; (8000528 <fsm_automatic+0x288>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	4a8c      	ldr	r2, [pc, #560]	; (8000528 <fsm_automatic+0x288>)
 80002f6:	6013      	str	r3, [r2, #0]
					if (counterRed1 == INIT){
 80002f8:	4b8b      	ldr	r3, [pc, #556]	; (8000528 <fsm_automatic+0x288>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d106      	bne.n	800030e <fsm_automatic+0x6e>
						counterRed1 = AUTO_RED;
 8000300:	4b8b      	ldr	r3, [pc, #556]	; (8000530 <fsm_automatic+0x290>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a88      	ldr	r2, [pc, #544]	; (8000528 <fsm_automatic+0x288>)
 8000306:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_GREEN;
 8000308:	4b85      	ldr	r3, [pc, #532]	; (8000520 <fsm_automatic+0x280>)
 800030a:	2202      	movs	r2, #2
 800030c:	601a      	str	r2, [r3, #0]
					}
					setTimer1(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f000 fe6e 	bl	8000ff0 <setTimer1>
				}
				break;
 8000314:	e03d      	b.n	8000392 <fsm_automatic+0xf2>
			case STATE_GREEN:
				if (timer1_flag == 1){
 8000316:	4b83      	ldr	r3, [pc, #524]	; (8000524 <fsm_automatic+0x284>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d13b      	bne.n	8000396 <fsm_automatic+0xf6>
					enableGreen1();
 800031e:	f001 f8a3 	bl	8001468 <enableGreen1>
					led_buffer[0] = counterGreen1;
 8000322:	4b84      	ldr	r3, [pc, #528]	; (8000534 <fsm_automatic+0x294>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a81      	ldr	r2, [pc, #516]	; (800052c <fsm_automatic+0x28c>)
 8000328:	6013      	str	r3, [r2, #0]
					counterGreen1--;
 800032a:	4b82      	ldr	r3, [pc, #520]	; (8000534 <fsm_automatic+0x294>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	3b01      	subs	r3, #1
 8000330:	4a80      	ldr	r2, [pc, #512]	; (8000534 <fsm_automatic+0x294>)
 8000332:	6013      	str	r3, [r2, #0]
					if (counterGreen1 == INIT){
 8000334:	4b7f      	ldr	r3, [pc, #508]	; (8000534 <fsm_automatic+0x294>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d106      	bne.n	800034a <fsm_automatic+0xaa>
						counterGreen1 = AUTO_GREEN;
 800033c:	4b7e      	ldr	r3, [pc, #504]	; (8000538 <fsm_automatic+0x298>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a7c      	ldr	r2, [pc, #496]	; (8000534 <fsm_automatic+0x294>)
 8000342:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_YELLOW;
 8000344:	4b76      	ldr	r3, [pc, #472]	; (8000520 <fsm_automatic+0x280>)
 8000346:	2203      	movs	r2, #3
 8000348:	601a      	str	r2, [r3, #0]
					}
					setTimer1(100);
 800034a:	2064      	movs	r0, #100	; 0x64
 800034c:	f000 fe50 	bl	8000ff0 <setTimer1>
				}
				break;
 8000350:	e021      	b.n	8000396 <fsm_automatic+0xf6>
			case STATE_YELLOW:
				if (timer1_flag == 1){
 8000352:	4b74      	ldr	r3, [pc, #464]	; (8000524 <fsm_automatic+0x284>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d11f      	bne.n	800039a <fsm_automatic+0xfa>
					enableYellow1();
 800035a:	f001 f86f 	bl	800143c <enableYellow1>
					led_buffer[0] = counterYellow1;
 800035e:	4b77      	ldr	r3, [pc, #476]	; (800053c <fsm_automatic+0x29c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a72      	ldr	r2, [pc, #456]	; (800052c <fsm_automatic+0x28c>)
 8000364:	6013      	str	r3, [r2, #0]
					counterYellow1--;
 8000366:	4b75      	ldr	r3, [pc, #468]	; (800053c <fsm_automatic+0x29c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	4a73      	ldr	r2, [pc, #460]	; (800053c <fsm_automatic+0x29c>)
 800036e:	6013      	str	r3, [r2, #0]
					if (counterYellow1 == INIT){
 8000370:	4b72      	ldr	r3, [pc, #456]	; (800053c <fsm_automatic+0x29c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d106      	bne.n	8000386 <fsm_automatic+0xe6>
						counterYellow1 = AUTO_YELLOW;
 8000378:	4b71      	ldr	r3, [pc, #452]	; (8000540 <fsm_automatic+0x2a0>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a6f      	ldr	r2, [pc, #444]	; (800053c <fsm_automatic+0x29c>)
 800037e:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_RED;
 8000380:	4b67      	ldr	r3, [pc, #412]	; (8000520 <fsm_automatic+0x280>)
 8000382:	2201      	movs	r2, #1
 8000384:	601a      	str	r2, [r3, #0]
					}
					setTimer1(100);
 8000386:	2064      	movs	r0, #100	; 0x64
 8000388:	f000 fe32 	bl	8000ff0 <setTimer1>
				}
				break;
 800038c:	e005      	b.n	800039a <fsm_automatic+0xfa>
			default:
				break;
 800038e:	bf00      	nop
 8000390:	e004      	b.n	800039c <fsm_automatic+0xfc>
				break;
 8000392:	bf00      	nop
 8000394:	e002      	b.n	800039c <fsm_automatic+0xfc>
				break;
 8000396:	bf00      	nop
 8000398:	e000      	b.n	800039c <fsm_automatic+0xfc>
				break;
 800039a:	bf00      	nop
		}

		// AUTO MODE 2
		switch (statusAUTO2){
 800039c:	4b69      	ldr	r3, [pc, #420]	; (8000544 <fsm_automatic+0x2a4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d86c      	bhi.n	800047e <fsm_automatic+0x1de>
 80003a4:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <fsm_automatic+0x10c>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	080003cb 	.word	0x080003cb
 80003b4:	08000407 	.word	0x08000407
 80003b8:	08000443 	.word	0x08000443
			case INIT:
				statusAUTO2 = STATE_GREEN;
 80003bc:	4b61      	ldr	r3, [pc, #388]	; (8000544 <fsm_automatic+0x2a4>)
 80003be:	2202      	movs	r2, #2
 80003c0:	601a      	str	r2, [r3, #0]
				setTimer2(100);
 80003c2:	2064      	movs	r0, #100	; 0x64
 80003c4:	f000 fe28 	bl	8001018 <setTimer2>
				break;
 80003c8:	e060      	b.n	800048c <fsm_automatic+0x1ec>
			case STATE_RED:
				if (timer2_flag == 1){
 80003ca:	4b5f      	ldr	r3, [pc, #380]	; (8000548 <fsm_automatic+0x2a8>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d157      	bne.n	8000482 <fsm_automatic+0x1e2>
					enableRed2();
 80003d2:	f001 f85f 	bl	8001494 <enableRed2>
					led_buffer[1] = counterRed2;
 80003d6:	4b5d      	ldr	r3, [pc, #372]	; (800054c <fsm_automatic+0x2ac>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a54      	ldr	r2, [pc, #336]	; (800052c <fsm_automatic+0x28c>)
 80003dc:	6053      	str	r3, [r2, #4]
					counterRed2--;
 80003de:	4b5b      	ldr	r3, [pc, #364]	; (800054c <fsm_automatic+0x2ac>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	4a59      	ldr	r2, [pc, #356]	; (800054c <fsm_automatic+0x2ac>)
 80003e6:	6013      	str	r3, [r2, #0]
					if (counterRed2 == INIT){
 80003e8:	4b58      	ldr	r3, [pc, #352]	; (800054c <fsm_automatic+0x2ac>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d106      	bne.n	80003fe <fsm_automatic+0x15e>
						counterRed2 = AUTO_RED;
 80003f0:	4b4f      	ldr	r3, [pc, #316]	; (8000530 <fsm_automatic+0x290>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a55      	ldr	r2, [pc, #340]	; (800054c <fsm_automatic+0x2ac>)
 80003f6:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_GREEN;
 80003f8:	4b52      	ldr	r3, [pc, #328]	; (8000544 <fsm_automatic+0x2a4>)
 80003fa:	2202      	movs	r2, #2
 80003fc:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 80003fe:	2064      	movs	r0, #100	; 0x64
 8000400:	f000 fe0a 	bl	8001018 <setTimer2>
				}
				break;
 8000404:	e03d      	b.n	8000482 <fsm_automatic+0x1e2>
			case STATE_GREEN:
				if (timer2_flag == 1){
 8000406:	4b50      	ldr	r3, [pc, #320]	; (8000548 <fsm_automatic+0x2a8>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d13b      	bne.n	8000486 <fsm_automatic+0x1e6>
					enableGreen2();
 800040e:	f001 f86d 	bl	80014ec <enableGreen2>
					led_buffer[1] = counterGreen2;
 8000412:	4b4f      	ldr	r3, [pc, #316]	; (8000550 <fsm_automatic+0x2b0>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a45      	ldr	r2, [pc, #276]	; (800052c <fsm_automatic+0x28c>)
 8000418:	6053      	str	r3, [r2, #4]
					counterGreen2--;
 800041a:	4b4d      	ldr	r3, [pc, #308]	; (8000550 <fsm_automatic+0x2b0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	4a4b      	ldr	r2, [pc, #300]	; (8000550 <fsm_automatic+0x2b0>)
 8000422:	6013      	str	r3, [r2, #0]
					if (counterGreen2 == INIT){
 8000424:	4b4a      	ldr	r3, [pc, #296]	; (8000550 <fsm_automatic+0x2b0>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d106      	bne.n	800043a <fsm_automatic+0x19a>
						counterGreen2 = AUTO_GREEN;
 800042c:	4b42      	ldr	r3, [pc, #264]	; (8000538 <fsm_automatic+0x298>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a47      	ldr	r2, [pc, #284]	; (8000550 <fsm_automatic+0x2b0>)
 8000432:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_YELLOW;
 8000434:	4b43      	ldr	r3, [pc, #268]	; (8000544 <fsm_automatic+0x2a4>)
 8000436:	2203      	movs	r2, #3
 8000438:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f000 fdec 	bl	8001018 <setTimer2>
				}
				break;
 8000440:	e021      	b.n	8000486 <fsm_automatic+0x1e6>
			case STATE_YELLOW:
				if (timer2_flag == 1){
 8000442:	4b41      	ldr	r3, [pc, #260]	; (8000548 <fsm_automatic+0x2a8>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d11f      	bne.n	800048a <fsm_automatic+0x1ea>
					enableYellow2();
 800044a:	f001 f839 	bl	80014c0 <enableYellow2>
					led_buffer[1] = counterYellow2;
 800044e:	4b41      	ldr	r3, [pc, #260]	; (8000554 <fsm_automatic+0x2b4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a36      	ldr	r2, [pc, #216]	; (800052c <fsm_automatic+0x28c>)
 8000454:	6053      	str	r3, [r2, #4]
					counterYellow2--;
 8000456:	4b3f      	ldr	r3, [pc, #252]	; (8000554 <fsm_automatic+0x2b4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	4a3d      	ldr	r2, [pc, #244]	; (8000554 <fsm_automatic+0x2b4>)
 800045e:	6013      	str	r3, [r2, #0]
					if (counterYellow2 == INIT){
 8000460:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <fsm_automatic+0x2b4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d106      	bne.n	8000476 <fsm_automatic+0x1d6>
						counterYellow2 = AUTO_YELLOW;
 8000468:	4b35      	ldr	r3, [pc, #212]	; (8000540 <fsm_automatic+0x2a0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a39      	ldr	r2, [pc, #228]	; (8000554 <fsm_automatic+0x2b4>)
 800046e:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_RED;
 8000470:	4b34      	ldr	r3, [pc, #208]	; (8000544 <fsm_automatic+0x2a4>)
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 8000476:	2064      	movs	r0, #100	; 0x64
 8000478:	f000 fdce 	bl	8001018 <setTimer2>
				}
				break;
 800047c:	e005      	b.n	800048a <fsm_automatic+0x1ea>
			default:
				break;
 800047e:	bf00      	nop
 8000480:	e004      	b.n	800048c <fsm_automatic+0x1ec>
				break;
 8000482:	bf00      	nop
 8000484:	e002      	b.n	800048c <fsm_automatic+0x1ec>
				break;
 8000486:	bf00      	nop
 8000488:	e000      	b.n	800048c <fsm_automatic+0x1ec>
				break;
 800048a:	bf00      	nop
		}

		// AUTO MODE 3 - DISPLAY WAITING TIME
		switch (statusAUTO3){
 800048c:	4b32      	ldr	r3, [pc, #200]	; (8000558 <fsm_automatic+0x2b8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b02      	cmp	r3, #2
 8000492:	d020      	beq.n	80004d6 <fsm_automatic+0x236>
 8000494:	2b02      	cmp	r3, #2
 8000496:	dc31      	bgt.n	80004fc <fsm_automatic+0x25c>
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <fsm_automatic+0x202>
 800049c:	2b01      	cmp	r3, #1
 800049e:	d007      	beq.n	80004b0 <fsm_automatic+0x210>
					statusAUTO3 = HIGH_DIGIT;
					setTimer3(50);
				}
				break;
			default:
				break;
 80004a0:	e02c      	b.n	80004fc <fsm_automatic+0x25c>
				statusAUTO3 = HIGH_DIGIT;
 80004a2:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <fsm_automatic+0x2b8>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 80004a8:	2064      	movs	r0, #100	; 0x64
 80004aa:	f000 fdc9 	bl	8001040 <setTimer3>
				break;
 80004ae:	e02a      	b.n	8000506 <fsm_automatic+0x266>
				if (timer3_flag == 1){
 80004b0:	4b2a      	ldr	r3, [pc, #168]	; (800055c <fsm_automatic+0x2bc>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d123      	bne.n	8000500 <fsm_automatic+0x260>
					blinkDigit1(led_buffer[0], led_buffer[1]);
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <fsm_automatic+0x28c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1b      	ldr	r2, [pc, #108]	; (800052c <fsm_automatic+0x28c>)
 80004be:	6852      	ldr	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 fc00 	bl	8000cc8 <blinkDigit1>
					statusAUTO3 = LOW_DIGIT;
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <fsm_automatic+0x2b8>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	601a      	str	r2, [r3, #0]
					setTimer3(50);
 80004ce:	2032      	movs	r0, #50	; 0x32
 80004d0:	f000 fdb6 	bl	8001040 <setTimer3>
				break;
 80004d4:	e014      	b.n	8000500 <fsm_automatic+0x260>
				if (timer3_flag == 1){
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <fsm_automatic+0x2bc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d112      	bne.n	8000504 <fsm_automatic+0x264>
					blinkDigit2(led_buffer[0], led_buffer[1]);
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <fsm_automatic+0x28c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <fsm_automatic+0x28c>)
 80004e4:	6852      	ldr	r2, [r2, #4]
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fc27 	bl	8000d3c <blinkDigit2>
					statusAUTO3 = HIGH_DIGIT;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <fsm_automatic+0x2b8>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
					setTimer3(50);
 80004f4:	2032      	movs	r0, #50	; 0x32
 80004f6:	f000 fda3 	bl	8001040 <setTimer3>
				break;
 80004fa:	e003      	b.n	8000504 <fsm_automatic+0x264>
				break;
 80004fc:	bf00      	nop
 80004fe:	e002      	b.n	8000506 <fsm_automatic+0x266>
				break;
 8000500:	bf00      	nop
 8000502:	e000      	b.n	8000506 <fsm_automatic+0x266>
				break;
 8000504:	bf00      	nop
		}

		// CHANGE MODE
		switch(statusAUTO4){
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <fsm_automatic+0x2c0>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b03      	cmp	r3, #3
 800050c:	d03e      	beq.n	800058c <fsm_automatic+0x2ec>
 800050e:	2b03      	cmp	r3, #3
 8000510:	dc4a      	bgt.n	80005a8 <fsm_automatic+0x308>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d026      	beq.n	8000564 <fsm_automatic+0x2c4>
 8000516:	2b02      	cmp	r3, #2
 8000518:	d02e      	beq.n	8000578 <fsm_automatic+0x2d8>
				if (isButtonPressed(BUTTON1)==1)
					mode = MODE1;
				initVar();
				break;
			default:
				break;
 800051a:	e045      	b.n	80005a8 <fsm_automatic+0x308>
 800051c:	20000094 	.word	0x20000094
 8000520:	20000098 	.word	0x20000098
 8000524:	200000f4 	.word	0x200000f4
 8000528:	200000d8 	.word	0x200000d8
 800052c:	2000008c 	.word	0x2000008c
 8000530:	200000cc 	.word	0x200000cc
 8000534:	200000dc 	.word	0x200000dc
 8000538:	200000d0 	.word	0x200000d0
 800053c:	200000e0 	.word	0x200000e0
 8000540:	200000d4 	.word	0x200000d4
 8000544:	2000009c 	.word	0x2000009c
 8000548:	200000fc 	.word	0x200000fc
 800054c:	200000e4 	.word	0x200000e4
 8000550:	200000e8 	.word	0x200000e8
 8000554:	200000ec 	.word	0x200000ec
 8000558:	200000a0 	.word	0x200000a0
 800055c:	20000104 	.word	0x20000104
 8000560:	200000a4 	.word	0x200000a4
				if (isButtonPressed(BUTTON1)==1)
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff fdf1 	bl	800014c <isButtonPressed>
 800056a:	4603      	mov	r3, r0
 800056c:	2b01      	cmp	r3, #1
 800056e:	d11d      	bne.n	80005ac <fsm_automatic+0x30c>
					mode = MODE2;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <fsm_automatic+0x318>)
 8000572:	2202      	movs	r2, #2
 8000574:	601a      	str	r2, [r3, #0]
				break;
 8000576:	e019      	b.n	80005ac <fsm_automatic+0x30c>
				if (isButtonPressed(BUTTON1)==1)
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff fde7 	bl	800014c <isButtonPressed>
 800057e:	4603      	mov	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	d115      	bne.n	80005b0 <fsm_automatic+0x310>
					mode = MODE3;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <fsm_automatic+0x318>)
 8000586:	2203      	movs	r2, #3
 8000588:	601a      	str	r2, [r3, #0]
				break;
 800058a:	e011      	b.n	80005b0 <fsm_automatic+0x310>
				if (isButtonPressed(BUTTON1)==1)
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff fddd 	bl	800014c <isButtonPressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b01      	cmp	r3, #1
 8000596:	d102      	bne.n	800059e <fsm_automatic+0x2fe>
					mode = MODE1;
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <fsm_automatic+0x318>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
				initVar();
 800059e:	f000 fa3f 	bl	8000a20 <initVar>
				break;
 80005a2:	e006      	b.n	80005b2 <fsm_automatic+0x312>
		}
	}
 80005a4:	bf00      	nop
 80005a6:	e004      	b.n	80005b2 <fsm_automatic+0x312>
				break;
 80005a8:	bf00      	nop
 80005aa:	e002      	b.n	80005b2 <fsm_automatic+0x312>
				break;
 80005ac:	bf00      	nop
 80005ae:	e000      	b.n	80005b2 <fsm_automatic+0x312>
				break;
 80005b0:	bf00      	nop
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000094 	.word	0x20000094

080005bc <fsm_manual>:
 *      Author: ASUS
 */

#include "fsm_manual.h"

void fsm_manual(void) { // START IN MANUAL MODE
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

    // CONFIG RED (MODE2)
    if (mode == MODE2) {
 80005c0:	4b9e      	ldr	r3, [pc, #632]	; (800083c <fsm_manual+0x280>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	f040 809f 	bne.w	8000708 <fsm_manual+0x14c>
        // Blink LED RED
        switch (statusMODE2_1) {
 80005ca:	4b9d      	ldr	r3, [pc, #628]	; (8000840 <fsm_manual+0x284>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <fsm_manual+0x1c>
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d007      	beq.n	80005e6 <fsm_manual+0x2a>
                    toggleREDs();
                    setTimer4(25);
                }
                break;
            default:
                break;
 80005d6:	e010      	b.n	80005fa <fsm_manual+0x3e>
                statusMODE2_1 = TOGGLE;
 80005d8:	4b99      	ldr	r3, [pc, #612]	; (8000840 <fsm_manual+0x284>)
 80005da:	2201      	movs	r2, #1
 80005dc:	601a      	str	r2, [r3, #0]
                setTimer4(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fd42 	bl	8001068 <setTimer4>
                break;
 80005e4:	e009      	b.n	80005fa <fsm_manual+0x3e>
                if (timer4_flag == 1) {
 80005e6:	4b97      	ldr	r3, [pc, #604]	; (8000844 <fsm_manual+0x288>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d104      	bne.n	80005f8 <fsm_manual+0x3c>
                    toggleREDs();
 80005ee:	f000 ff93 	bl	8001518 <toggleREDs>
                    setTimer4(25);
 80005f2:	2019      	movs	r0, #25
 80005f4:	f000 fd38 	bl	8001068 <setTimer4>
                break;
 80005f8:	bf00      	nop
        }

        // Display Digit Red and Value
        switch (statusMODE2_2) {
 80005fa:	4b93      	ldr	r3, [pc, #588]	; (8000848 <fsm_manual+0x28c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d020      	beq.n	8000644 <fsm_manual+0x88>
 8000602:	2b02      	cmp	r3, #2
 8000604:	dc31      	bgt.n	800066a <fsm_manual+0xae>
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <fsm_manual+0x54>
 800060a:	2b01      	cmp	r3, #1
 800060c:	d007      	beq.n	800061e <fsm_manual+0x62>
                    statusMODE2_2 = HIGH_DIGIT;
                    setTimer5(25);
                }
                break;
            default:
                break;
 800060e:	e02c      	b.n	800066a <fsm_manual+0xae>
                statusMODE2_2 = HIGH_DIGIT;
 8000610:	4b8d      	ldr	r3, [pc, #564]	; (8000848 <fsm_manual+0x28c>)
 8000612:	2201      	movs	r2, #1
 8000614:	601a      	str	r2, [r3, #0]
                setTimer5(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fd3a 	bl	8001090 <setTimer5>
                break;
 800061c:	e02a      	b.n	8000674 <fsm_manual+0xb8>
                if (timer5_flag == 1) {
 800061e:	4b8b      	ldr	r3, [pc, #556]	; (800084c <fsm_manual+0x290>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d123      	bne.n	800066e <fsm_manual+0xb2>
                    blinkDigit1(mode, AUTO_RED);
 8000626:	4b85      	ldr	r3, [pc, #532]	; (800083c <fsm_manual+0x280>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a89      	ldr	r2, [pc, #548]	; (8000850 <fsm_manual+0x294>)
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	4611      	mov	r1, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fb49 	bl	8000cc8 <blinkDigit1>
                    statusMODE2_2 = LOW_DIGIT;
 8000636:	4b84      	ldr	r3, [pc, #528]	; (8000848 <fsm_manual+0x28c>)
 8000638:	2202      	movs	r2, #2
 800063a:	601a      	str	r2, [r3, #0]
                    setTimer5(25);
 800063c:	2019      	movs	r0, #25
 800063e:	f000 fd27 	bl	8001090 <setTimer5>
                break;
 8000642:	e014      	b.n	800066e <fsm_manual+0xb2>
                if (timer5_flag == 1) {
 8000644:	4b81      	ldr	r3, [pc, #516]	; (800084c <fsm_manual+0x290>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d112      	bne.n	8000672 <fsm_manual+0xb6>
                    blinkDigit2(mode, AUTO_RED);
 800064c:	4b7b      	ldr	r3, [pc, #492]	; (800083c <fsm_manual+0x280>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a7f      	ldr	r2, [pc, #508]	; (8000850 <fsm_manual+0x294>)
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fb70 	bl	8000d3c <blinkDigit2>
                    statusMODE2_2 = HIGH_DIGIT;
 800065c:	4b7a      	ldr	r3, [pc, #488]	; (8000848 <fsm_manual+0x28c>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
                    setTimer5(25);
 8000662:	2019      	movs	r0, #25
 8000664:	f000 fd14 	bl	8001090 <setTimer5>
                break;
 8000668:	e003      	b.n	8000672 <fsm_manual+0xb6>
                break;
 800066a:	bf00      	nop
 800066c:	e002      	b.n	8000674 <fsm_manual+0xb8>
                break;
 800066e:	bf00      	nop
 8000670:	e000      	b.n	8000674 <fsm_manual+0xb8>
                break;
 8000672:	bf00      	nop
        }

        // Change time for mode
        switch (statusMODE2_3) {
 8000674:	4b77      	ldr	r3, [pc, #476]	; (8000854 <fsm_manual+0x298>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d031      	beq.n	80006e0 <fsm_manual+0x124>
 800067c:	2b04      	cmp	r3, #4
 800067e:	dc35      	bgt.n	80006ec <fsm_manual+0x130>
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <fsm_manual+0xce>
 8000684:	2b02      	cmp	r3, #2
 8000686:	d00f      	beq.n	80006a8 <fsm_manual+0xec>
            case SAVE:
                mode = MODE1;
                initVar();
                break;
            default:
                break;
 8000688:	e030      	b.n	80006ec <fsm_manual+0x130>
                if (isButtonPressed(BUTTON2) == 1) {
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff fd5e 	bl	800014c <isButtonPressed>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d12c      	bne.n	80006f0 <fsm_manual+0x134>
                    statusMODE2_3 = INCREASE;
 8000696:	4b6f      	ldr	r3, [pc, #444]	; (8000854 <fsm_manual+0x298>)
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
                    AUTO_RED++;
 800069c:	4b6c      	ldr	r3, [pc, #432]	; (8000850 <fsm_manual+0x294>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a6b      	ldr	r2, [pc, #428]	; (8000850 <fsm_manual+0x294>)
 80006a4:	6013      	str	r3, [r2, #0]
                break;
 80006a6:	e023      	b.n	80006f0 <fsm_manual+0x134>
                if (isButtonPressed(BUTTON2) == 1) {
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff fd4f 	bl	800014c <isButtonPressed>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d10b      	bne.n	80006cc <fsm_manual+0x110>
                    AUTO_RED += 1;
 80006b4:	4b66      	ldr	r3, [pc, #408]	; (8000850 <fsm_manual+0x294>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a65      	ldr	r2, [pc, #404]	; (8000850 <fsm_manual+0x294>)
 80006bc:	6013      	str	r3, [r2, #0]
                    if (AUTO_RED > UPPER_BOUND) AUTO_RED = UPPER_BOUND;
 80006be:	4b64      	ldr	r3, [pc, #400]	; (8000850 <fsm_manual+0x294>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b63      	cmp	r3, #99	; 0x63
 80006c4:	dd02      	ble.n	80006cc <fsm_manual+0x110>
 80006c6:	4b62      	ldr	r3, [pc, #392]	; (8000850 <fsm_manual+0x294>)
 80006c8:	2263      	movs	r2, #99	; 0x63
 80006ca:	601a      	str	r2, [r3, #0]
                if (isButtonPressed(BUTTON3) == 1) {
 80006cc:	2002      	movs	r0, #2
 80006ce:	f7ff fd3d 	bl	800014c <isButtonPressed>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d10d      	bne.n	80006f4 <fsm_manual+0x138>
                    statusMODE2_3 = SAVE;
 80006d8:	4b5e      	ldr	r3, [pc, #376]	; (8000854 <fsm_manual+0x298>)
 80006da:	2204      	movs	r2, #4
 80006dc:	601a      	str	r2, [r3, #0]
                break;
 80006de:	e009      	b.n	80006f4 <fsm_manual+0x138>
                mode = MODE1;
 80006e0:	4b56      	ldr	r3, [pc, #344]	; (800083c <fsm_manual+0x280>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
                initVar();
 80006e6:	f000 f99b 	bl	8000a20 <initVar>
                break;
 80006ea:	e004      	b.n	80006f6 <fsm_manual+0x13a>
                break;
 80006ec:	bf00      	nop
 80006ee:	e002      	b.n	80006f6 <fsm_manual+0x13a>
                break;
 80006f0:	bf00      	nop
 80006f2:	e000      	b.n	80006f6 <fsm_manual+0x13a>
                break;
 80006f4:	bf00      	nop
        }

        // Continue to MODE3
        if (isButtonPressed(BUTTON1) == 1) {
 80006f6:	2000      	movs	r0, #0
 80006f8:	f7ff fd28 	bl	800014c <isButtonPressed>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d102      	bne.n	8000708 <fsm_manual+0x14c>
            mode = MODE3;
 8000702:	4b4e      	ldr	r3, [pc, #312]	; (800083c <fsm_manual+0x280>)
 8000704:	2203      	movs	r2, #3
 8000706:	601a      	str	r2, [r3, #0]
        }
    }

    // CONFIG GREEN (MODE3)
    if (mode == MODE3) {
 8000708:	4b4c      	ldr	r3, [pc, #304]	; (800083c <fsm_manual+0x280>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b03      	cmp	r3, #3
 800070e:	f040 80b9 	bne.w	8000884 <fsm_manual+0x2c8>
        // Blink LED GREEN
        switch (statusMODE3_1) {
 8000712:	4b51      	ldr	r3, [pc, #324]	; (8000858 <fsm_manual+0x29c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <fsm_manual+0x164>
 800071a:	2b01      	cmp	r3, #1
 800071c:	d007      	beq.n	800072e <fsm_manual+0x172>
                    toggleGREENs();
                    setTimer6(25);
                }
                break;
            default:
                break;
 800071e:	e010      	b.n	8000742 <fsm_manual+0x186>
                statusMODE3_1 = TOGGLE;
 8000720:	4b4d      	ldr	r3, [pc, #308]	; (8000858 <fsm_manual+0x29c>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
                setTimer6(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fcc6 	bl	80010b8 <setTimer6>
                break;
 800072c:	e009      	b.n	8000742 <fsm_manual+0x186>
                if (timer6_flag == 1) {
 800072e:	4b4b      	ldr	r3, [pc, #300]	; (800085c <fsm_manual+0x2a0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d104      	bne.n	8000740 <fsm_manual+0x184>
                    toggleGREENs();
 8000736:	f000 ff11 	bl	800155c <toggleGREENs>
                    setTimer6(25);
 800073a:	2019      	movs	r0, #25
 800073c:	f000 fcbc 	bl	80010b8 <setTimer6>
                break;
 8000740:	bf00      	nop
        }

        // Display Digit Green and Value
        switch (statusMODE3_2) {
 8000742:	4b47      	ldr	r3, [pc, #284]	; (8000860 <fsm_manual+0x2a4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b02      	cmp	r3, #2
 8000748:	d020      	beq.n	800078c <fsm_manual+0x1d0>
 800074a:	2b02      	cmp	r3, #2
 800074c:	dc31      	bgt.n	80007b2 <fsm_manual+0x1f6>
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <fsm_manual+0x19c>
 8000752:	2b01      	cmp	r3, #1
 8000754:	d007      	beq.n	8000766 <fsm_manual+0x1aa>
                    statusMODE3_2 = HIGH_DIGIT;
                    setTimer7(25);
                }
                break;
            default:
                break;
 8000756:	e02c      	b.n	80007b2 <fsm_manual+0x1f6>
                statusMODE3_2 = HIGH_DIGIT;
 8000758:	4b41      	ldr	r3, [pc, #260]	; (8000860 <fsm_manual+0x2a4>)
 800075a:	2201      	movs	r2, #1
 800075c:	601a      	str	r2, [r3, #0]
                setTimer7(1);
 800075e:	2001      	movs	r0, #1
 8000760:	f000 fcbe 	bl	80010e0 <setTimer7>
                break;
 8000764:	e02a      	b.n	80007bc <fsm_manual+0x200>
                if (timer7_flag == 1) {
 8000766:	4b3f      	ldr	r3, [pc, #252]	; (8000864 <fsm_manual+0x2a8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d123      	bne.n	80007b6 <fsm_manual+0x1fa>
                    blinkDigit1(mode, AUTO_GREEN);
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <fsm_manual+0x280>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a3d      	ldr	r2, [pc, #244]	; (8000868 <fsm_manual+0x2ac>)
 8000774:	6812      	ldr	r2, [r2, #0]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f000 faa5 	bl	8000cc8 <blinkDigit1>
                    statusMODE3_2 = LOW_DIGIT;
 800077e:	4b38      	ldr	r3, [pc, #224]	; (8000860 <fsm_manual+0x2a4>)
 8000780:	2202      	movs	r2, #2
 8000782:	601a      	str	r2, [r3, #0]
                    setTimer7(25);
 8000784:	2019      	movs	r0, #25
 8000786:	f000 fcab 	bl	80010e0 <setTimer7>
                break;
 800078a:	e014      	b.n	80007b6 <fsm_manual+0x1fa>
                if (timer7_flag == 1) {
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <fsm_manual+0x2a8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d112      	bne.n	80007ba <fsm_manual+0x1fe>
                    blinkDigit2(mode, AUTO_GREEN);
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <fsm_manual+0x280>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a33      	ldr	r2, [pc, #204]	; (8000868 <fsm_manual+0x2ac>)
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 facc 	bl	8000d3c <blinkDigit2>
                    statusMODE3_2 = HIGH_DIGIT;
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <fsm_manual+0x2a4>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
                    setTimer7(25);
 80007aa:	2019      	movs	r0, #25
 80007ac:	f000 fc98 	bl	80010e0 <setTimer7>
                break;
 80007b0:	e003      	b.n	80007ba <fsm_manual+0x1fe>
                break;
 80007b2:	bf00      	nop
 80007b4:	e002      	b.n	80007bc <fsm_manual+0x200>
                break;
 80007b6:	bf00      	nop
 80007b8:	e000      	b.n	80007bc <fsm_manual+0x200>
                break;
 80007ba:	bf00      	nop
        }

        // Change time for mode
        switch (statusMODE3_3) {
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <fsm_manual+0x2b0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d031      	beq.n	8000828 <fsm_manual+0x26c>
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	dc35      	bgt.n	8000834 <fsm_manual+0x278>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <fsm_manual+0x216>
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d00f      	beq.n	80007f0 <fsm_manual+0x234>
            case SAVE:
                mode = MODE1;
                initVar();
                break;
            default:
                break;
 80007d0:	e030      	b.n	8000834 <fsm_manual+0x278>
                if (isButtonPressed(BUTTON2) == 1) {
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff fcba 	bl	800014c <isButtonPressed>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d12c      	bne.n	8000838 <fsm_manual+0x27c>
                    statusMODE3_3 = INCREASE;
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <fsm_manual+0x2b0>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	601a      	str	r2, [r3, #0]
                    AUTO_GREEN++;
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <fsm_manual+0x2ac>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <fsm_manual+0x2ac>)
 80007ec:	6013      	str	r3, [r2, #0]
                break;
 80007ee:	e023      	b.n	8000838 <fsm_manual+0x27c>
                if (isButtonPressed(BUTTON2) == 1) {
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff fcab 	bl	800014c <isButtonPressed>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d10b      	bne.n	8000814 <fsm_manual+0x258>
                    AUTO_GREEN += 1;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <fsm_manual+0x2ac>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a19      	ldr	r2, [pc, #100]	; (8000868 <fsm_manual+0x2ac>)
 8000804:	6013      	str	r3, [r2, #0]
                    if (AUTO_GREEN > UPPER_BOUND) AUTO_GREEN = UPPER_BOUND;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <fsm_manual+0x2ac>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b63      	cmp	r3, #99	; 0x63
 800080c:	dd02      	ble.n	8000814 <fsm_manual+0x258>
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <fsm_manual+0x2ac>)
 8000810:	2263      	movs	r2, #99	; 0x63
 8000812:	601a      	str	r2, [r3, #0]
                if (isButtonPressed(BUTTON3) == 1) {
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff fc99 	bl	800014c <isButtonPressed>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d127      	bne.n	8000870 <fsm_manual+0x2b4>
                    statusMODE3_3 = SAVE;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <fsm_manual+0x2b0>)
 8000822:	2204      	movs	r2, #4
 8000824:	601a      	str	r2, [r3, #0]
                break;
 8000826:	e023      	b.n	8000870 <fsm_manual+0x2b4>
                mode = MODE1;
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <fsm_manual+0x280>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]
                initVar();
 800082e:	f000 f8f7 	bl	8000a20 <initVar>
                break;
 8000832:	e01e      	b.n	8000872 <fsm_manual+0x2b6>
                break;
 8000834:	bf00      	nop
 8000836:	e01c      	b.n	8000872 <fsm_manual+0x2b6>
                break;
 8000838:	bf00      	nop
 800083a:	e01a      	b.n	8000872 <fsm_manual+0x2b6>
 800083c:	20000094 	.word	0x20000094
 8000840:	200000a8 	.word	0x200000a8
 8000844:	2000010c 	.word	0x2000010c
 8000848:	200000ac 	.word	0x200000ac
 800084c:	20000114 	.word	0x20000114
 8000850:	200000cc 	.word	0x200000cc
 8000854:	200000b0 	.word	0x200000b0
 8000858:	200000b4 	.word	0x200000b4
 800085c:	2000011c 	.word	0x2000011c
 8000860:	200000b8 	.word	0x200000b8
 8000864:	20000124 	.word	0x20000124
 8000868:	200000d0 	.word	0x200000d0
 800086c:	200000bc 	.word	0x200000bc
                break;
 8000870:	bf00      	nop
        }

        // Continue to MODE4
        if (isButtonPressed(BUTTON1) == 1) {
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fc6a 	bl	800014c <isButtonPressed>
 8000878:	4603      	mov	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d102      	bne.n	8000884 <fsm_manual+0x2c8>
            mode = MODE4;
 800087e:	4b54      	ldr	r3, [pc, #336]	; (80009d0 <fsm_manual+0x414>)
 8000880:	2204      	movs	r2, #4
 8000882:	601a      	str	r2, [r3, #0]
        }
    }

    // CONFIG YELLOW (MODE4)
    if (mode == MODE4) {
 8000884:	4b52      	ldr	r3, [pc, #328]	; (80009d0 <fsm_manual+0x414>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b04      	cmp	r3, #4
 800088a:	f040 809f 	bne.w	80009cc <fsm_manual+0x410>
        // Blink LED YELLOW
        switch (statusMODE4_1) {
 800088e:	4b51      	ldr	r3, [pc, #324]	; (80009d4 <fsm_manual+0x418>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <fsm_manual+0x2e0>
 8000896:	2b01      	cmp	r3, #1
 8000898:	d007      	beq.n	80008aa <fsm_manual+0x2ee>
                    toggleYELLOWs();
                    setTimer8(25);
                }
                break;
            default:
                break;
 800089a:	e010      	b.n	80008be <fsm_manual+0x302>
                statusMODE4_1 = TOGGLE;
 800089c:	4b4d      	ldr	r3, [pc, #308]	; (80009d4 <fsm_manual+0x418>)
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]
                setTimer8(1);
 80008a2:	2001      	movs	r0, #1
 80008a4:	f000 fc30 	bl	8001108 <setTimer8>
                break;
 80008a8:	e009      	b.n	80008be <fsm_manual+0x302>
                if (timer8_flag == 1) {
 80008aa:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <fsm_manual+0x41c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d104      	bne.n	80008bc <fsm_manual+0x300>
                    toggleYELLOWs();
 80008b2:	f000 fe75 	bl	80015a0 <toggleYELLOWs>
                    setTimer8(25);
 80008b6:	2019      	movs	r0, #25
 80008b8:	f000 fc26 	bl	8001108 <setTimer8>
                break;
 80008bc:	bf00      	nop
        }

        // Display Digit Yellow and Value
        switch (statusMODE4_2) {
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <fsm_manual+0x420>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d020      	beq.n	8000908 <fsm_manual+0x34c>
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	dc31      	bgt.n	800092e <fsm_manual+0x372>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <fsm_manual+0x318>
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d007      	beq.n	80008e2 <fsm_manual+0x326>
                    statusMODE4_2 = HIGH_DIGIT;
                    setTimer9(25);
                }
                break;
            default:
                break;
 80008d2:	e02c      	b.n	800092e <fsm_manual+0x372>
                statusMODE4_2 = HIGH_DIGIT;
 80008d4:	4b41      	ldr	r3, [pc, #260]	; (80009dc <fsm_manual+0x420>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	601a      	str	r2, [r3, #0]
                setTimer9(1);
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fc28 	bl	8001130 <setTimer9>
                break;
 80008e0:	e02a      	b.n	8000938 <fsm_manual+0x37c>
                if (timer9_flag == 1) {
 80008e2:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <fsm_manual+0x424>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d123      	bne.n	8000932 <fsm_manual+0x376>
                    blinkDigit1(mode, AUTO_YELLOW);
 80008ea:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <fsm_manual+0x414>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a3d      	ldr	r2, [pc, #244]	; (80009e4 <fsm_manual+0x428>)
 80008f0:	6812      	ldr	r2, [r2, #0]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f9e7 	bl	8000cc8 <blinkDigit1>
                    statusMODE4_2 = LOW_DIGIT;
 80008fa:	4b38      	ldr	r3, [pc, #224]	; (80009dc <fsm_manual+0x420>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	601a      	str	r2, [r3, #0]
                    setTimer9(25);
 8000900:	2019      	movs	r0, #25
 8000902:	f000 fc15 	bl	8001130 <setTimer9>
                break;
 8000906:	e014      	b.n	8000932 <fsm_manual+0x376>
                if (timer9_flag == 1) {
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <fsm_manual+0x424>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d112      	bne.n	8000936 <fsm_manual+0x37a>
                    blinkDigit2(mode, AUTO_YELLOW);
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <fsm_manual+0x414>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <fsm_manual+0x428>)
 8000916:	6812      	ldr	r2, [r2, #0]
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fa0e 	bl	8000d3c <blinkDigit2>
                    statusMODE4_2 = HIGH_DIGIT;
 8000920:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <fsm_manual+0x420>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
                    setTimer9(25);
 8000926:	2019      	movs	r0, #25
 8000928:	f000 fc02 	bl	8001130 <setTimer9>
                break;
 800092c:	e003      	b.n	8000936 <fsm_manual+0x37a>
                break;
 800092e:	bf00      	nop
 8000930:	e002      	b.n	8000938 <fsm_manual+0x37c>
                break;
 8000932:	bf00      	nop
 8000934:	e000      	b.n	8000938 <fsm_manual+0x37c>
                break;
 8000936:	bf00      	nop
        }

        // Change time for mode
        switch (statusMODE4_3) {
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <fsm_manual+0x42c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b04      	cmp	r3, #4
 800093e:	d031      	beq.n	80009a4 <fsm_manual+0x3e8>
 8000940:	2b04      	cmp	r3, #4
 8000942:	dc35      	bgt.n	80009b0 <fsm_manual+0x3f4>
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <fsm_manual+0x392>
 8000948:	2b02      	cmp	r3, #2
 800094a:	d00f      	beq.n	800096c <fsm_manual+0x3b0>
            case SAVE:
                mode = MODE1;
                initVar();
                break;
            default:
                break;
 800094c:	e030      	b.n	80009b0 <fsm_manual+0x3f4>
                if (isButtonPressed(BUTTON2) == 1) {
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff fbfc 	bl	800014c <isButtonPressed>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d12c      	bne.n	80009b4 <fsm_manual+0x3f8>
                    statusMODE4_3 = INCREASE;
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <fsm_manual+0x42c>)
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
                    AUTO_YELLOW++;
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <fsm_manual+0x428>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <fsm_manual+0x428>)
 8000968:	6013      	str	r3, [r2, #0]
                break;
 800096a:	e023      	b.n	80009b4 <fsm_manual+0x3f8>
                if (isButtonPressed(BUTTON2) == 1) {
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff fbed 	bl	800014c <isButtonPressed>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10b      	bne.n	8000990 <fsm_manual+0x3d4>
                    AUTO_YELLOW += 1;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <fsm_manual+0x428>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <fsm_manual+0x428>)
 8000980:	6013      	str	r3, [r2, #0]
                    if (AUTO_YELLOW > UPPER_BOUND) AUTO_YELLOW = UPPER_BOUND;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <fsm_manual+0x428>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b63      	cmp	r3, #99	; 0x63
 8000988:	dd02      	ble.n	8000990 <fsm_manual+0x3d4>
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <fsm_manual+0x428>)
 800098c:	2263      	movs	r2, #99	; 0x63
 800098e:	601a      	str	r2, [r3, #0]
                if (isButtonPressed(BUTTON3) == 1) {
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fbdb 	bl	800014c <isButtonPressed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10d      	bne.n	80009b8 <fsm_manual+0x3fc>
                    statusMODE4_3 = SAVE;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <fsm_manual+0x42c>)
 800099e:	2204      	movs	r2, #4
 80009a0:	601a      	str	r2, [r3, #0]
                break;
 80009a2:	e009      	b.n	80009b8 <fsm_manual+0x3fc>
                mode = MODE1;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <fsm_manual+0x414>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
                initVar();
 80009aa:	f000 f839 	bl	8000a20 <initVar>
                break;
 80009ae:	e004      	b.n	80009ba <fsm_manual+0x3fe>
                break;
 80009b0:	bf00      	nop
 80009b2:	e002      	b.n	80009ba <fsm_manual+0x3fe>
                break;
 80009b4:	bf00      	nop
 80009b6:	e000      	b.n	80009ba <fsm_manual+0x3fe>
                break;
 80009b8:	bf00      	nop
        }

        // Return to MODE1
        if (isButtonPressed(BUTTON1) == 1) {
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fbc6 	bl	800014c <isButtonPressed>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d102      	bne.n	80009cc <fsm_manual+0x410>
            mode = MODE1;
 80009c6:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <fsm_manual+0x414>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
        }
    }
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000094 	.word	0x20000094
 80009d4:	200000c0 	.word	0x200000c0
 80009d8:	2000012c 	.word	0x2000012c
 80009dc:	200000c4 	.word	0x200000c4
 80009e0:	20000134 	.word	0x20000134
 80009e4:	200000d4 	.word	0x200000d4
 80009e8:	200000c8 	.word	0x200000c8

080009ec <initWaitingTime>:
int counterGreen2 = 0;
int counterYellow2 = 0;

/*------------------------------- Function Implementations -------------------------------*/

void initWaitingTime(void) {
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
    AUTO_GREEN = 8;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <initWaitingTime+0x28>)
 80009f2:	2208      	movs	r2, #8
 80009f4:	601a      	str	r2, [r3, #0]
    AUTO_YELLOW = 2;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <initWaitingTime+0x2c>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	601a      	str	r2, [r3, #0]
    AUTO_RED = AUTO_GREEN + AUTO_YELLOW;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <initWaitingTime+0x28>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <initWaitingTime+0x2c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <initWaitingTime+0x30>)
 8000a08:	6013      	str	r3, [r2, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	200000d0 	.word	0x200000d0
 8000a18:	200000d4 	.word	0x200000d4
 8000a1c:	200000cc 	.word	0x200000cc

08000a20 <initVar>:

void initVar(void) {
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
    mode = MODE1;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <initVar+0x90>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]

    // Initialize status variables for Automatic Mode (MODE 1)
    statusAUTO1 = INIT;
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <initVar+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
    statusAUTO2 = INIT;
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <initVar+0x98>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
    statusAUTO3 = INIT;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <initVar+0x9c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
    statusAUTO4 = INIT;
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <initVar+0xa0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]

    // Initialize status variables for Manual Mode (MODE 2)
    statusMODE2_1 = INIT;
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <initVar+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
    statusMODE2_2 = INIT;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <initVar+0xa8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
    statusMODE2_3 = INIT;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <initVar+0xac>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]

    // Initialize status variables for Manual Mode (MODE 3)
    statusMODE3_1 = INIT;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <initVar+0xb0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
    statusMODE3_2 = INIT;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <initVar+0xb4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
    statusMODE3_3 = INIT;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <initVar+0xb8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]

    // Initialize status variables for Manual Mode (MODE 4)
    statusMODE4_1 = INIT;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <initVar+0xbc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
    statusMODE4_2 = INIT;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <initVar+0xc0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
    statusMODE4_3 = INIT;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <initVar+0xc4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]

    // Initialize counters for each traffic light side
    counterRed1 = AUTO_RED;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <initVar+0xc8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <initVar+0xcc>)
 8000a7e:	6013      	str	r3, [r2, #0]
    counterGreen1 = AUTO_GREEN;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <initVar+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <initVar+0xd4>)
 8000a86:	6013      	str	r3, [r2, #0]
    counterYellow1 = AUTO_YELLOW;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <initVar+0xd8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <initVar+0xdc>)
 8000a8e:	6013      	str	r3, [r2, #0]

    counterRed2 = AUTO_RED;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <initVar+0xc8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a1a      	ldr	r2, [pc, #104]	; (8000b00 <initVar+0xe0>)
 8000a96:	6013      	str	r3, [r2, #0]
    counterGreen2 = AUTO_GREEN;
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <initVar+0xd0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <initVar+0xe4>)
 8000a9e:	6013      	str	r3, [r2, #0]
    counterYellow2 = AUTO_YELLOW;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <initVar+0xd8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <initVar+0xe8>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	20000094 	.word	0x20000094
 8000ab4:	20000098 	.word	0x20000098
 8000ab8:	2000009c 	.word	0x2000009c
 8000abc:	200000a0 	.word	0x200000a0
 8000ac0:	200000a4 	.word	0x200000a4
 8000ac4:	200000a8 	.word	0x200000a8
 8000ac8:	200000ac 	.word	0x200000ac
 8000acc:	200000b0 	.word	0x200000b0
 8000ad0:	200000b4 	.word	0x200000b4
 8000ad4:	200000b8 	.word	0x200000b8
 8000ad8:	200000bc 	.word	0x200000bc
 8000adc:	200000c0 	.word	0x200000c0
 8000ae0:	200000c4 	.word	0x200000c4
 8000ae4:	200000c8 	.word	0x200000c8
 8000ae8:	200000cc 	.word	0x200000cc
 8000aec:	200000d8 	.word	0x200000d8
 8000af0:	200000d0 	.word	0x200000d0
 8000af4:	200000dc 	.word	0x200000dc
 8000af8:	200000d4 	.word	0x200000d4
 8000afc:	200000e0 	.word	0x200000e0
 8000b00:	200000e4 	.word	0x200000e4
 8000b04:	200000e8 	.word	0x200000e8
 8000b08:	200000ec 	.word	0x200000ec

08000b0c <display7SEG1>:
		, 0x02 //6
		, 0x78 //7
		, 0x00 //8
		, 0x10 /*9*/};

void display7SEG1(int num){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, ((sevenSegTable[num]>>0)&0x01));
 8000b14:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <display7SEG1+0xd0>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	2101      	movs	r1, #1
 8000b26:	482e      	ldr	r0, [pc, #184]	; (8000be0 <display7SEG1+0xd4>)
 8000b28:	f001 f883 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, ((sevenSegTable[num]>>1)&0x01));
 8000b2c:	4a2b      	ldr	r2, [pc, #172]	; (8000bdc <display7SEG1+0xd0>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	2102      	movs	r1, #2
 8000b42:	4827      	ldr	r0, [pc, #156]	; (8000be0 <display7SEG1+0xd4>)
 8000b44:	f001 f875 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, ((sevenSegTable[num]>>2)&0x01));
 8000b48:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <display7SEG1+0xd0>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	4820      	ldr	r0, [pc, #128]	; (8000be0 <display7SEG1+0xd4>)
 8000b60:	f001 f867 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, ((sevenSegTable[num]>>3)&0x01));
 8000b64:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <display7SEG1+0xd0>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4819      	ldr	r0, [pc, #100]	; (8000be0 <display7SEG1+0xd4>)
 8000b7c:	f001 f859 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, ((sevenSegTable[num]>>4)&0x01));
 8000b80:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <display7SEG1+0xd0>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	091b      	lsrs	r3, r3, #4
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	2110      	movs	r1, #16
 8000b96:	4812      	ldr	r0, [pc, #72]	; (8000be0 <display7SEG1+0xd4>)
 8000b98:	f001 f84b 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F0_GPIO_Port, F0_Pin, ((sevenSegTable[num]>>5)&0x01));
 8000b9c:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <display7SEG1+0xd0>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	095b      	lsrs	r3, r3, #5
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <display7SEG1+0xd4>)
 8000bb4:	f001 f83d 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, ((sevenSegTable[num]>>6)&0x01));
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <display7SEG1+0xd0>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	099b      	lsrs	r3, r3, #6
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <display7SEG1+0xd4>)
 8000bd0:	f001 f82f 	bl	8001c32 <HAL_GPIO_WritePin>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	08002cac 	.word	0x08002cac
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <display7SEG2>:

void display7SEG2(int num){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, ((sevenSegTable[num]>>0)&0x01));
 8000bec:	4a34      	ldr	r2, [pc, #208]	; (8000cc0 <display7SEG2+0xdc>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	4831      	ldr	r0, [pc, #196]	; (8000cc4 <display7SEG2+0xe0>)
 8000c00:	f001 f817 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, ((sevenSegTable[num]>>1)&0x01));
 8000c04:	4a2e      	ldr	r2, [pc, #184]	; (8000cc0 <display7SEG2+0xdc>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	085b      	lsrs	r3, r3, #1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1c:	4829      	ldr	r0, [pc, #164]	; (8000cc4 <display7SEG2+0xe0>)
 8000c1e:	f001 f808 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, ((sevenSegTable[num]>>2)&0x01));
 8000c22:	4a27      	ldr	r2, [pc, #156]	; (8000cc0 <display7SEG2+0xdc>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3a:	4822      	ldr	r0, [pc, #136]	; (8000cc4 <display7SEG2+0xe0>)
 8000c3c:	f000 fff9 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, ((sevenSegTable[num]>>3)&0x01));
 8000c40:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <display7SEG2+0xdc>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c58:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <display7SEG2+0xe0>)
 8000c5a:	f000 ffea 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, ((sevenSegTable[num]>>4)&0x01));
 8000c5e:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <display7SEG2+0xdc>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	091b      	lsrs	r3, r3, #4
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c76:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <display7SEG2+0xe0>)
 8000c78:	f000 ffdb 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, ((sevenSegTable[num]>>5)&0x01));
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <display7SEG2+0xdc>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	095b      	lsrs	r3, r3, #5
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <display7SEG2+0xe0>)
 8000c96:	f000 ffcc 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, ((sevenSegTable[num]>>6)&0x01));
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <display7SEG2+0xdc>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	099b      	lsrs	r3, r3, #6
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <display7SEG2+0xe0>)
 8000cb4:	f000 ffbd 	bl	8001c32 <HAL_GPIO_WritePin>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	08002cac 	.word	0x08002cac
 8000cc4:	40010c00 	.word	0x40010c00

08000cc8 <blinkDigit1>:

void blinkDigit1(int num1, int num2){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd8:	4816      	ldr	r0, [pc, #88]	; (8000d34 <blinkDigit1+0x6c>)
 8000cda:	f000 ffaa 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <blinkDigit1+0x6c>)
 8000ce6:	f000 ffa4 	bl	8001c32 <HAL_GPIO_WritePin>
	display7SEG1(num1/10);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <blinkDigit1+0x70>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1092      	asrs	r2, r2, #2
 8000cf4:	17db      	asrs	r3, r3, #31
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff07 	bl	8000b0c <display7SEG1>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <blinkDigit1+0x6c>)
 8000d06:	f000 ff94 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <blinkDigit1+0x6c>)
 8000d12:	f000 ff8e 	bl	8001c32 <HAL_GPIO_WritePin>
	display7SEG2(num2/10);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <blinkDigit1+0x70>)
 8000d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1e:	1092      	asrs	r2, r2, #2
 8000d20:	17db      	asrs	r3, r3, #31
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5d 	bl	8000be4 <display7SEG2>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40010800 	.word	0x40010800
 8000d38:	66666667 	.word	0x66666667

08000d3c <blinkDigit2>:

void blinkDigit2(int num1, int num2){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4c:	481b      	ldr	r0, [pc, #108]	; (8000dbc <blinkDigit2+0x80>)
 8000d4e:	f000 ff70 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d58:	4818      	ldr	r0, [pc, #96]	; (8000dbc <blinkDigit2+0x80>)
 8000d5a:	f000 ff6a 	bl	8001c32 <HAL_GPIO_WritePin>
	display7SEG1(num1%10);
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <blinkDigit2+0x84>)
 8000d62:	fb83 1302 	smull	r1, r3, r3, r2
 8000d66:	1099      	asrs	r1, r3, #2
 8000d68:	17d3      	asrs	r3, r2, #31
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	1ad1      	subs	r1, r2, r3
 8000d76:	4608      	mov	r0, r1
 8000d78:	f7ff fec8 	bl	8000b0c <display7SEG1>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <blinkDigit2+0x80>)
 8000d84:	f000 ff55 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <blinkDigit2+0x80>)
 8000d90:	f000 ff4f 	bl	8001c32 <HAL_GPIO_WritePin>
	display7SEG2(num2%10);
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <blinkDigit2+0x84>)
 8000d98:	fb83 1302 	smull	r1, r3, r3, r2
 8000d9c:	1099      	asrs	r1, r3, #2
 8000d9e:	17d3      	asrs	r3, r2, #31
 8000da0:	1ac9      	subs	r1, r1, r3
 8000da2:	460b      	mov	r3, r1
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	440b      	add	r3, r1
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	1ad1      	subs	r1, r2, r3
 8000dac:	4608      	mov	r0, r1
 8000dae:	f7ff ff19 	bl	8000be4 <display7SEG2>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	66666667 	.word	0x66666667

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc8:	f000 fc32 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dcc:	f000 f812 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000dd0:	f000 f84c 	bl	8000e6c <MX_TIM2_Init>
  MX_GPIO_Init();
 8000dd4:	f000 f896 	bl	8000f04 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <main+0x2c>)
 8000dda:	f001 fb93 	bl	8002504 <HAL_TIM_Base_Start_IT>

  initWaitingTime();
 8000dde:	f7ff fe05 	bl	80009ec <initWaitingTime>
  initVar();
 8000de2:	f7ff fe1d 	bl	8000a20 <initVar>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic();
 8000de6:	f7ff fa5b 	bl	80002a0 <fsm_automatic>
	  fsm_manual();
 8000dea:	f7ff fbe7 	bl	80005bc <fsm_manual>
	  fsm_automatic();
 8000dee:	e7fa      	b.n	8000de6 <main+0x22>
 8000df0:	20000140 	.word	0x20000140

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	; 0x40
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	2228      	movs	r2, #40	; 0x28
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 ff36 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1e:	2310      	movs	r3, #16
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 ff32 	bl	8001c94 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e36:	f000 f8d5 	bl	8000fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 f99e 	bl	8002194 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e5e:	f000 f8c1 	bl	8000fe4 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3740      	adds	r7, #64	; 0x40
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	463b      	mov	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <MX_TIM2_Init+0x94>)
 8000e8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_TIM2_Init+0x94>)
 8000e92:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_TIM2_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_TIM2_Init+0x94>)
 8000ea0:	2209      	movs	r2, #9
 8000ea2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_TIM2_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_TIM2_Init+0x94>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb0:	4813      	ldr	r0, [pc, #76]	; (8000f00 <MX_TIM2_Init+0x94>)
 8000eb2:	f001 fad7 	bl	8002464 <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ebc:	f000 f892 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_TIM2_Init+0x94>)
 8000ece:	f001 fc6d 	bl	80027ac <HAL_TIM_ConfigClockSource>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ed8:	f000 f884 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_TIM2_Init+0x94>)
 8000eea:	f001 fe35 	bl	8002b58 <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ef4:	f000 f876 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000140 	.word	0x20000140

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_GPIO_Init+0xbc>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <MX_GPIO_Init+0xbc>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <MX_GPIO_Init+0xbc>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <MX_GPIO_Init+0xbc>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <MX_GPIO_Init+0xbc>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <MX_GPIO_Init+0xbc>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f640 717e 	movw	r1, #3966	; 0xf7e
 8000f4e:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <MX_GPIO_Init+0xc0>)
 8000f50:	f000 fe6f 	bl	8001c32 <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_Pin|B0_Pin|C0_Pin|D1_Pin
 8000f54:	2200      	movs	r2, #0
 8000f56:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000f5a:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <MX_GPIO_Init+0xc4>)
 8000f5c:	f000 fe69 	bl	8001c32 <HAL_GPIO_WritePin>
                          |B1_Pin|C1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000f60:	f640 737e 	movw	r3, #3966	; 0xf7e
 8000f64:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	4619      	mov	r1, r3
 8000f78:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <MX_GPIO_Init+0xc0>)
 8000f7a:	f000 fcc9 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin B0_Pin C0_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin A1_Pin
                           B1_Pin C1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|B0_Pin|C0_Pin|D1_Pin
 8000f7e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000f82:	60bb      	str	r3, [r7, #8]
                          |E1_Pin|F1_Pin|G1_Pin|D0_Pin
                          |E0_Pin|F0_Pin|G0_Pin|A1_Pin
                          |B1_Pin|C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4619      	mov	r1, r3
 8000f96:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_GPIO_Init+0xc4>)
 8000f98:	f000 fcba 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000f9c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000fa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_GPIO_Init+0xc0>)
 8000fb2:	f000 fcad 	bl	8001910 <HAL_GPIO_Init>

}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010c00 	.word	0x40010c00

08000fcc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	timerRun();
 8000fd4:	f000 f8c0 	bl	8001158 <timerRun>
	getKeyInput();
 8000fd8:	f7ff f8e2 	bl	80001a0 <getKeyInput>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000ff8:	4a05      	ldr	r2, [pc, #20]	; (8001010 <setTimer1+0x20>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <setTimer1+0x24>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200000f0 	.word	0x200000f0
 8001014:	200000f4 	.word	0x200000f4

08001018 <setTimer2>:

void setTimer2(int duration){
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <setTimer2+0x20>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <setTimer2+0x24>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200000f8 	.word	0x200000f8
 800103c:	200000fc 	.word	0x200000fc

08001040 <setTimer3>:

void setTimer3(int duration){
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001048:	4a05      	ldr	r2, [pc, #20]	; (8001060 <setTimer3+0x20>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <setTimer3+0x24>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000100 	.word	0x20000100
 8001064:	20000104 	.word	0x20000104

08001068 <setTimer4>:

void setTimer4(int duration){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <setTimer4+0x20>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <setTimer4+0x24>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000108 	.word	0x20000108
 800108c:	2000010c 	.word	0x2000010c

08001090 <setTimer5>:

void setTimer5(int duration){
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8001098:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <setTimer5+0x20>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <setTimer5+0x24>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000110 	.word	0x20000110
 80010b4:	20000114 	.word	0x20000114

080010b8 <setTimer6>:

void setTimer6(int duration){
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <setTimer6+0x20>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <setTimer6+0x24>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000118 	.word	0x20000118
 80010dc:	2000011c 	.word	0x2000011c

080010e0 <setTimer7>:

void setTimer7(int duration){
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	timer7_counter = duration;
 80010e8:	4a05      	ldr	r2, [pc, #20]	; (8001100 <setTimer7+0x20>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <setTimer7+0x24>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000120 	.word	0x20000120
 8001104:	20000124 	.word	0x20000124

08001108 <setTimer8>:

void setTimer8(int duration){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	timer8_counter = duration;
 8001110:	4a05      	ldr	r2, [pc, #20]	; (8001128 <setTimer8+0x20>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <setTimer8+0x24>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000128 	.word	0x20000128
 800112c:	2000012c 	.word	0x2000012c

08001130 <setTimer9>:

void setTimer9(int duration){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	timer9_counter = duration;
 8001138:	4a05      	ldr	r2, [pc, #20]	; (8001150 <setTimer9+0x20>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <setTimer9+0x24>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000130 	.word	0x20000130
 8001154:	20000134 	.word	0x20000134

08001158 <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 800115c:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <timerRun+0x14c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	dd0b      	ble.n	800117c <timerRun+0x24>
		timer1_counter--;
 8001164:	4b4f      	ldr	r3, [pc, #316]	; (80012a4 <timerRun+0x14c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3b01      	subs	r3, #1
 800116a:	4a4e      	ldr	r2, [pc, #312]	; (80012a4 <timerRun+0x14c>)
 800116c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <timerRun+0x14c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <timerRun+0x24>
			timer1_flag = 1;
 8001176:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <timerRun+0x150>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <timerRun+0x154>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	dd0b      	ble.n	800119c <timerRun+0x44>
		timer2_counter--;
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <timerRun+0x154>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3b01      	subs	r3, #1
 800118a:	4a48      	ldr	r2, [pc, #288]	; (80012ac <timerRun+0x154>)
 800118c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <timerRun+0x154>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <timerRun+0x44>
			timer2_flag = 1;
 8001196:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <timerRun+0x158>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 800119c:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <timerRun+0x15c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dd0b      	ble.n	80011bc <timerRun+0x64>
		timer3_counter--;
 80011a4:	4b43      	ldr	r3, [pc, #268]	; (80012b4 <timerRun+0x15c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	4a42      	ldr	r2, [pc, #264]	; (80012b4 <timerRun+0x15c>)
 80011ac:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 80011ae:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <timerRun+0x15c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <timerRun+0x64>
			timer3_flag = 1;
 80011b6:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <timerRun+0x160>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 80011bc:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <timerRun+0x164>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	dd0b      	ble.n	80011dc <timerRun+0x84>
		timer4_counter--;
 80011c4:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <timerRun+0x164>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <timerRun+0x164>)
 80011cc:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <timerRun+0x164>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <timerRun+0x84>
			timer4_flag = 1;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <timerRun+0x168>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 80011dc:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <timerRun+0x16c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	dd0b      	ble.n	80011fc <timerRun+0xa4>
		timer5_counter--;
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <timerRun+0x16c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <timerRun+0x16c>)
 80011ec:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <timerRun+0x16c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <timerRun+0xa4>
			timer5_flag = 1;
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <timerRun+0x170>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <timerRun+0x174>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	dd0b      	ble.n	800121c <timerRun+0xc4>
		timer6_counter--;
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <timerRun+0x174>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3b01      	subs	r3, #1
 800120a:	4a30      	ldr	r2, [pc, #192]	; (80012cc <timerRun+0x174>)
 800120c:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <timerRun+0x174>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <timerRun+0xc4>
			timer6_flag = 1;
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <timerRun+0x178>)
 8001218:	2201      	movs	r2, #1
 800121a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <timerRun+0x17c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	dd0b      	ble.n	800123c <timerRun+0xe4>
		timer7_counter--;
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <timerRun+0x17c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3b01      	subs	r3, #1
 800122a:	4a2a      	ldr	r2, [pc, #168]	; (80012d4 <timerRun+0x17c>)
 800122c:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <timerRun+0x17c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <timerRun+0xe4>
			timer7_flag = 1;
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <timerRun+0x180>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <timerRun+0x184>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	dd0b      	ble.n	800125c <timerRun+0x104>
		timer8_counter--;
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <timerRun+0x184>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	4a24      	ldr	r2, [pc, #144]	; (80012dc <timerRun+0x184>)
 800124c:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <timerRun+0x184>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <timerRun+0x104>
			timer8_flag = 1;
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <timerRun+0x188>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <timerRun+0x18c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	dd0b      	ble.n	800127c <timerRun+0x124>
		timer9_counter--;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <timerRun+0x18c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3b01      	subs	r3, #1
 800126a:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <timerRun+0x18c>)
 800126c:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <timerRun+0x18c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <timerRun+0x124>
			timer9_flag = 1;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <timerRun+0x190>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <timerRun+0x194>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	dd0b      	ble.n	800129c <timerRun+0x144>
		timer10_counter--;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <timerRun+0x194>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3b01      	subs	r3, #1
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <timerRun+0x194>)
 800128c:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <timerRun+0x194>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <timerRun+0x144>
			timer10_flag = 1;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <timerRun+0x198>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	200000f0 	.word	0x200000f0
 80012a8:	200000f4 	.word	0x200000f4
 80012ac:	200000f8 	.word	0x200000f8
 80012b0:	200000fc 	.word	0x200000fc
 80012b4:	20000100 	.word	0x20000100
 80012b8:	20000104 	.word	0x20000104
 80012bc:	20000108 	.word	0x20000108
 80012c0:	2000010c 	.word	0x2000010c
 80012c4:	20000110 	.word	0x20000110
 80012c8:	20000114 	.word	0x20000114
 80012cc:	20000118 	.word	0x20000118
 80012d0:	2000011c 	.word	0x2000011c
 80012d4:	20000120 	.word	0x20000120
 80012d8:	20000124 	.word	0x20000124
 80012dc:	20000128 	.word	0x20000128
 80012e0:	2000012c 	.word	0x2000012c
 80012e4:	20000130 	.word	0x20000130
 80012e8:	20000134 	.word	0x20000134
 80012ec:	20000138 	.word	0x20000138
 80012f0:	2000013c 	.word	0x2000013c

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_MspInit+0x5c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_MspInit+0x5c>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6193      	str	r3, [r2, #24]
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_MspInit+0x5c>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_MspInit+0x5c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_MspInit+0x60>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_MspInit+0x60>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000

08001358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001368:	d113      	bne.n	8001392 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_TIM_Base_MspInit+0x44>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <HAL_TIM_Base_MspInit+0x44>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_TIM_Base_MspInit+0x44>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	201c      	movs	r0, #28
 8001388:	f000 fa8b 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800138c:	201c      	movs	r0, #28
 800138e:	f000 faa4 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e6:	f000 f969 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <TIM2_IRQHandler+0x10>)
 80013f6:	f001 f8d1 	bl	800259c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000140 	.word	0x20000140

08001404 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <enableRed1>:
 *      Author: ASUS
 */
#include "main.h"
#include "traffic_light.h"

void enableRed1(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2102      	movs	r1, #2
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <enableRed1+0x28>)
 800141a:	f000 fc0a 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800141e:	2201      	movs	r2, #1
 8001420:	2108      	movs	r1, #8
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <enableRed1+0x28>)
 8001424:	f000 fc05 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2104      	movs	r1, #4
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <enableRed1+0x28>)
 800142e:	f000 fc00 	bl	8001c32 <HAL_GPIO_WritePin>
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40010800 	.word	0x40010800

0800143c <enableYellow1>:

void enableYellow1(){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2102      	movs	r1, #2
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <enableYellow1+0x28>)
 8001446:	f000 fbf4 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2108      	movs	r1, #8
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <enableYellow1+0x28>)
 8001450:	f000 fbef 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2104      	movs	r1, #4
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <enableYellow1+0x28>)
 800145a:	f000 fbea 	bl	8001c32 <HAL_GPIO_WritePin>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010800 	.word	0x40010800

08001468 <enableGreen1>:
void enableGreen1(){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2102      	movs	r1, #2
 8001470:	4807      	ldr	r0, [pc, #28]	; (8001490 <enableGreen1+0x28>)
 8001472:	f000 fbde 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2108      	movs	r1, #8
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <enableGreen1+0x28>)
 800147c:	f000 fbd9 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2104      	movs	r1, #4
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <enableGreen1+0x28>)
 8001486:	f000 fbd4 	bl	8001c32 <HAL_GPIO_WritePin>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40010800 	.word	0x40010800

08001494 <enableRed2>:

void enableRed2(){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2110      	movs	r1, #16
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <enableRed2+0x28>)
 800149e:	f000 fbc8 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <enableRed2+0x28>)
 80014a8:	f000 fbc3 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2120      	movs	r1, #32
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <enableRed2+0x28>)
 80014b2:	f000 fbbe 	bl	8001c32 <HAL_GPIO_WritePin>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40010800 	.word	0x40010800

080014c0 <enableYellow2>:
void enableYellow2(){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2110      	movs	r1, #16
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <enableYellow2+0x28>)
 80014ca:	f000 fbb2 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2140      	movs	r1, #64	; 0x40
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <enableYellow2+0x28>)
 80014d4:	f000 fbad 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2120      	movs	r1, #32
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <enableYellow2+0x28>)
 80014de:	f000 fba8 	bl	8001c32 <HAL_GPIO_WritePin>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40010800 	.word	0x40010800

080014ec <enableGreen2>:
void enableGreen2(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2110      	movs	r1, #16
 80014f4:	4807      	ldr	r0, [pc, #28]	; (8001514 <enableGreen2+0x28>)
 80014f6:	f000 fb9c 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2140      	movs	r1, #64	; 0x40
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <enableGreen2+0x28>)
 8001500:	f000 fb97 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001504:	2201      	movs	r2, #1
 8001506:	2120      	movs	r1, #32
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <enableGreen2+0x28>)
 800150a:	f000 fb92 	bl	8001c32 <HAL_GPIO_WritePin>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40010800 	.word	0x40010800

08001518 <toggleREDs>:

void toggleREDs(){
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 800151c:	2102      	movs	r1, #2
 800151e:	480e      	ldr	r0, [pc, #56]	; (8001558 <toggleREDs+0x40>)
 8001520:	f000 fb9f 	bl	8001c62 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8001524:	2110      	movs	r1, #16
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <toggleREDs+0x40>)
 8001528:	f000 fb9b 	bl	8001c62 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2108      	movs	r1, #8
 8001530:	4809      	ldr	r0, [pc, #36]	; (8001558 <toggleREDs+0x40>)
 8001532:	f000 fb7e 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <toggleREDs+0x40>)
 800153c:	f000 fb79 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2104      	movs	r1, #4
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <toggleREDs+0x40>)
 8001546:	f000 fb74 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2120      	movs	r1, #32
 800154e:	4802      	ldr	r0, [pc, #8]	; (8001558 <toggleREDs+0x40>)
 8001550:	f000 fb6f 	bl	8001c32 <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40010800 	.word	0x40010800

0800155c <toggleGREENs>:
void toggleGREENs(){
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8001560:	2108      	movs	r1, #8
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <toggleGREENs+0x40>)
 8001564:	f000 fb7d 	bl	8001c62 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	480c      	ldr	r0, [pc, #48]	; (800159c <toggleGREENs+0x40>)
 800156c:	f000 fb79 	bl	8001c62 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2102      	movs	r1, #2
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <toggleGREENs+0x40>)
 8001576:	f000 fb5c 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2110      	movs	r1, #16
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <toggleGREENs+0x40>)
 8001580:	f000 fb57 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001584:	2201      	movs	r2, #1
 8001586:	2104      	movs	r1, #4
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <toggleGREENs+0x40>)
 800158a:	f000 fb52 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 800158e:	2201      	movs	r2, #1
 8001590:	2120      	movs	r1, #32
 8001592:	4802      	ldr	r0, [pc, #8]	; (800159c <toggleGREENs+0x40>)
 8001594:	f000 fb4d 	bl	8001c32 <HAL_GPIO_WritePin>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40010800 	.word	0x40010800

080015a0 <toggleYELLOWs>:
void toggleYELLOWs(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 80015a4:	2104      	movs	r1, #4
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <toggleYELLOWs+0x40>)
 80015a8:	f000 fb5b 	bl	8001c62 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 80015ac:	2120      	movs	r1, #32
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <toggleYELLOWs+0x40>)
 80015b0:	f000 fb57 	bl	8001c62 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2108      	movs	r1, #8
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <toggleYELLOWs+0x40>)
 80015ba:	f000 fb3a 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <toggleYELLOWs+0x40>)
 80015c4:	f000 fb35 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2102      	movs	r1, #2
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <toggleYELLOWs+0x40>)
 80015ce:	f000 fb30 	bl	8001c32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2110      	movs	r1, #16
 80015d6:	4802      	ldr	r0, [pc, #8]	; (80015e0 <toggleYELLOWs+0x40>)
 80015d8:	f000 fb2b 	bl	8001c32 <HAL_GPIO_WritePin>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40010800 	.word	0x40010800

080015e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e4:	f7ff ff0e 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e8:	480b      	ldr	r0, [pc, #44]	; (8001618 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ea:	490c      	ldr	r1, [pc, #48]	; (800161c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a09      	ldr	r2, [pc, #36]	; (8001624 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001600:	4c09      	ldr	r4, [pc, #36]	; (8001628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160e:	f001 fb0d 	bl	8002c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001612:	f7ff fbd7 	bl	8000dc4 <main>
  bx lr
 8001616:	4770      	bx	lr
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001620:	08002cd0 	.word	0x08002cd0
  ldr r2, =_sbss
 8001624:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001628:	2000018c 	.word	0x2000018c

0800162c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_2_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x28>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x28>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f923 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	200f      	movs	r0, #15
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fe52 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f93b 	bl	80018f6 <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f903 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000054 	.word	0x20000054
 80016b4:	2000005c 	.word	0x2000005c
 80016b8:	20000058 	.word	0x20000058

080016bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_IncTick+0x1c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_IncTick+0x20>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <HAL_IncTick+0x20>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	2000005c 	.word	0x2000005c
 80016dc:	20000188 	.word	0x20000188

080016e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b02      	ldr	r3, [pc, #8]	; (80016f0 <HAL_GetTick+0x10>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000188 	.word	0x20000188

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4906      	ldr	r1, [pc, #24]	; (800178c <__NVIC_EnableIRQ+0x34>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff90 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff2d 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff42 	bl	800173c <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff90 	bl	80017e4 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5f 	bl	8001790 <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff35 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa2 	bl	8001848 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b08b      	sub	sp, #44	; 0x2c
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	e148      	b.n	8001bb6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001924:	2201      	movs	r2, #1
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8137 	bne.w	8001bb0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4aa3      	ldr	r2, [pc, #652]	; (8001bd4 <HAL_GPIO_Init+0x2c4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d05e      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 800194c:	4aa1      	ldr	r2, [pc, #644]	; (8001bd4 <HAL_GPIO_Init+0x2c4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d875      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001952:	4aa1      	ldr	r2, [pc, #644]	; (8001bd8 <HAL_GPIO_Init+0x2c8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d058      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001958:	4a9f      	ldr	r2, [pc, #636]	; (8001bd8 <HAL_GPIO_Init+0x2c8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d86f      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800195e:	4a9f      	ldr	r2, [pc, #636]	; (8001bdc <HAL_GPIO_Init+0x2cc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d052      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001964:	4a9d      	ldr	r2, [pc, #628]	; (8001bdc <HAL_GPIO_Init+0x2cc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d869      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800196a:	4a9d      	ldr	r2, [pc, #628]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d04c      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001970:	4a9b      	ldr	r2, [pc, #620]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d863      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001976:	4a9b      	ldr	r2, [pc, #620]	; (8001be4 <HAL_GPIO_Init+0x2d4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d046      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 800197c:	4a99      	ldr	r2, [pc, #612]	; (8001be4 <HAL_GPIO_Init+0x2d4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d85d      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d82a      	bhi.n	80019dc <HAL_GPIO_Init+0xcc>
 8001986:	2b12      	cmp	r3, #18
 8001988:	d859      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800198a:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <HAL_GPIO_Init+0x80>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	08001a0b 	.word	0x08001a0b
 8001994:	080019e5 	.word	0x080019e5
 8001998:	080019f7 	.word	0x080019f7
 800199c:	08001a39 	.word	0x08001a39
 80019a0:	08001a3f 	.word	0x08001a3f
 80019a4:	08001a3f 	.word	0x08001a3f
 80019a8:	08001a3f 	.word	0x08001a3f
 80019ac:	08001a3f 	.word	0x08001a3f
 80019b0:	08001a3f 	.word	0x08001a3f
 80019b4:	08001a3f 	.word	0x08001a3f
 80019b8:	08001a3f 	.word	0x08001a3f
 80019bc:	08001a3f 	.word	0x08001a3f
 80019c0:	08001a3f 	.word	0x08001a3f
 80019c4:	08001a3f 	.word	0x08001a3f
 80019c8:	08001a3f 	.word	0x08001a3f
 80019cc:	08001a3f 	.word	0x08001a3f
 80019d0:	08001a3f 	.word	0x08001a3f
 80019d4:	080019ed 	.word	0x080019ed
 80019d8:	08001a01 	.word	0x08001a01
 80019dc:	4a82      	ldr	r2, [pc, #520]	; (8001be8 <HAL_GPIO_Init+0x2d8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019e2:	e02c      	b.n	8001a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e029      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	3304      	adds	r3, #4
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e024      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	3308      	adds	r3, #8
 80019fc:	623b      	str	r3, [r7, #32]
          break;
 80019fe:	e01f      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	330c      	adds	r3, #12
 8001a06:	623b      	str	r3, [r7, #32]
          break;
 8001a08:	e01a      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a12:	2304      	movs	r3, #4
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e013      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a20:	2308      	movs	r3, #8
 8001a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	611a      	str	r2, [r3, #16]
          break;
 8001a2a:	e009      	b.n	8001a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	615a      	str	r2, [r3, #20]
          break;
 8001a36:	e003      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
          break;
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          break;
 8001a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2bff      	cmp	r3, #255	; 0xff
 8001a44:	d801      	bhi.n	8001a4a <HAL_GPIO_Init+0x13a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_Init+0x13e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2bff      	cmp	r3, #255	; 0xff
 8001a54:	d802      	bhi.n	8001a5c <HAL_GPIO_Init+0x14c>
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	e002      	b.n	8001a62 <HAL_GPIO_Init+0x152>
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3b08      	subs	r3, #8
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	210f      	movs	r1, #15
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	401a      	ands	r2, r3
 8001a74:	6a39      	ldr	r1, [r7, #32]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8090 	beq.w	8001bb0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a90:	4b56      	ldr	r3, [pc, #344]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a55      	ldr	r2, [pc, #340]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa8:	4a51      	ldr	r2, [pc, #324]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a49      	ldr	r2, [pc, #292]	; (8001bf4 <HAL_GPIO_Init+0x2e4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00d      	beq.n	8001af0 <HAL_GPIO_Init+0x1e0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_GPIO_Init+0x2e8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x1dc>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a47      	ldr	r2, [pc, #284]	; (8001bfc <HAL_GPIO_Init+0x2ec>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_GPIO_Init+0x1d8>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e004      	b.n	8001af2 <HAL_GPIO_Init+0x1e2>
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e002      	b.n	8001af2 <HAL_GPIO_Init+0x1e2>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_GPIO_Init+0x1e2>
 8001af0:	2300      	movs	r3, #0
 8001af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af4:	f002 0203 	and.w	r2, r2, #3
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	4093      	lsls	r3, r2
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b02:	493b      	ldr	r1, [pc, #236]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	3302      	adds	r3, #2
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4937      	ldr	r1, [pc, #220]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b2a:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	4933      	ldr	r1, [pc, #204]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	492d      	ldr	r1, [pc, #180]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b52:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4929      	ldr	r1, [pc, #164]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d006      	beq.n	8001b7a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4923      	ldr	r1, [pc, #140]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	491f      	ldr	r1, [pc, #124]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4919      	ldr	r1, [pc, #100]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4915      	ldr	r1, [pc, #84]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f aeaf 	bne.w	8001924 <HAL_GPIO_Init+0x14>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	372c      	adds	r7, #44	; 0x2c
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	10320000 	.word	0x10320000
 8001bd8:	10310000 	.word	0x10310000
 8001bdc:	10220000 	.word	0x10220000
 8001be0:	10210000 	.word	0x10210000
 8001be4:	10120000 	.word	0x10120000
 8001be8:	10110000 	.word	0x10110000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40010800 	.word	0x40010800
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e001      	b.n	8001c26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	807b      	strh	r3, [r7, #2]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c42:	787b      	ldrb	r3, [r7, #1]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c48:	887a      	ldrh	r2, [r7, #2]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c4e:	e003      	b.n	8001c58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	041a      	lsls	r2, r3, #16
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	611a      	str	r2, [r3, #16]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c74:	887a      	ldrh	r2, [r7, #2]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	041a      	lsls	r2, r3, #16
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	400b      	ands	r3, r1
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e26c      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8087 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb4:	4b92      	ldr	r3, [pc, #584]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d00c      	beq.n	8001cda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc0:	4b8f      	ldr	r3, [pc, #572]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d112      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x5e>
 8001ccc:	4b8c      	ldr	r3, [pc, #560]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cda:	4b89      	ldr	r3, [pc, #548]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d06c      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x12c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d168      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e246      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x76>
 8001cfc:	4b80      	ldr	r3, [pc, #512]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a7f      	ldr	r2, [pc, #508]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e02e      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x98>
 8001d12:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7a      	ldr	r2, [pc, #488]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a77      	ldr	r2, [pc, #476]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0xbc>
 8001d36:	4b72      	ldr	r3, [pc, #456]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a71      	ldr	r2, [pc, #452]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b6f      	ldr	r3, [pc, #444]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a6e      	ldr	r2, [pc, #440]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d50:	4b6b      	ldr	r3, [pc, #428]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6a      	ldr	r2, [pc, #424]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a67      	ldr	r2, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fcb6 	bl	80016e0 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fcb2 	bl	80016e0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1fa      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xe4>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fca2 	bl	80016e0 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff fc9e 	bl	80016e0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e1e6      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x10c>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d063      	beq.n	8001e96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dce:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dda:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d11c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x18c>
 8001de6:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d116      	bne.n	8001e20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_RCC_OscConfig+0x176>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e1ba      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0a:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4939      	ldr	r1, [pc, #228]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	e03a      	b.n	8001e96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d020      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e28:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fc57 	bl	80016e0 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e36:	f7ff fc53 	bl	80016e0 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e19b      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e54:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4927      	ldr	r1, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
 8001e68:	e015      	b.n	8001e96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff fc36 	bl	80016e0 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e78:	f7ff fc32 	bl	80016e0 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e17a      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03a      	beq.n	8001f18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d019      	beq.n	8001ede <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_RCC_OscConfig+0x274>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fc16 	bl	80016e0 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fc12 	bl	80016e0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e15a      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f000 faa6 	bl	8002428 <RCC_Delay>
 8001edc:	e01c      	b.n	8001f18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fbfc 	bl	80016e0 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eea:	e00f      	b.n	8001f0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff fbf8 	bl	80016e0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d908      	bls.n	8001f0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e140      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	42420000 	.word	0x42420000
 8001f08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0c:	4b9e      	ldr	r3, [pc, #632]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e9      	bne.n	8001eec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a6 	beq.w	8002072 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2a:	4b97      	ldr	r3, [pc, #604]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10d      	bne.n	8001f52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b94      	ldr	r3, [pc, #592]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a93      	ldr	r2, [pc, #588]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b91      	ldr	r3, [pc, #580]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	4b8e      	ldr	r3, [pc, #568]	; (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d118      	bne.n	8001f90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5e:	4b8b      	ldr	r3, [pc, #556]	; (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a8a      	ldr	r2, [pc, #552]	; (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fbb9 	bl	80016e0 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7ff fbb5 	bl	80016e0 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b64      	cmp	r3, #100	; 0x64
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e0fd      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	4b81      	ldr	r3, [pc, #516]	; (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x312>
 8001f98:	4b7b      	ldr	r3, [pc, #492]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a7a      	ldr	r2, [pc, #488]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6213      	str	r3, [r2, #32]
 8001fa4:	e02d      	b.n	8002002 <HAL_RCC_OscConfig+0x36e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x334>
 8001fae:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a75      	ldr	r2, [pc, #468]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	4b73      	ldr	r3, [pc, #460]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a72      	ldr	r2, [pc, #456]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	e01c      	b.n	8002002 <HAL_RCC_OscConfig+0x36e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d10c      	bne.n	8001fea <HAL_RCC_OscConfig+0x356>
 8001fd0:	4b6d      	ldr	r3, [pc, #436]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a6c      	ldr	r2, [pc, #432]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a69      	ldr	r2, [pc, #420]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6213      	str	r3, [r2, #32]
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0x36e>
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a66      	ldr	r2, [pc, #408]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	4b64      	ldr	r3, [pc, #400]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a63      	ldr	r2, [pc, #396]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d015      	beq.n	8002036 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff fb69 	bl	80016e0 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fb65 	bl	80016e0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0ab      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	4b57      	ldr	r3, [pc, #348]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ee      	beq.n	8002012 <HAL_RCC_OscConfig+0x37e>
 8002034:	e014      	b.n	8002060 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff fb53 	bl	80016e0 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7ff fb4f 	bl	80016e0 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e095      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	4b4c      	ldr	r3, [pc, #304]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ee      	bne.n	800203e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b48      	ldr	r3, [pc, #288]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a47      	ldr	r2, [pc, #284]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002070:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8081 	beq.w	800217e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207c:	4b42      	ldr	r3, [pc, #264]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d061      	beq.n	800214c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d146      	bne.n	800211e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_RCC_OscConfig+0x4fc>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fb23 	bl	80016e0 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209e:	f7ff fb1f 	bl	80016e0 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e067      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b0:	4b35      	ldr	r3, [pc, #212]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c4:	d108      	bne.n	80020d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	492d      	ldr	r1, [pc, #180]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a19      	ldr	r1, [r3, #32]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	430b      	orrs	r3, r1
 80020ea:	4927      	ldr	r1, [pc, #156]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <HAL_RCC_OscConfig+0x4fc>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7ff faf3 	bl	80016e0 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7ff faef 	bl	80016e0 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e037      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x46a>
 800211c:	e02f      	b.n	800217e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <HAL_RCC_OscConfig+0x4fc>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff fadc 	bl	80016e0 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff fad8 	bl	80016e0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e020      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x498>
 800214a:	e018      	b.n	800217e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e013      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	429a      	cmp	r2, r3
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	42420060 	.word	0x42420060

08002194 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0d0      	b.n	800234a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a8:	4b6a      	ldr	r3, [pc, #424]	; (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d910      	bls.n	80021d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b67      	ldr	r3, [pc, #412]	; (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 0207 	bic.w	r2, r3, #7
 80021be:	4965      	ldr	r1, [pc, #404]	; (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b63      	ldr	r3, [pc, #396]	; (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0b8      	b.n	800234a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d020      	beq.n	8002226 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f0:	4b59      	ldr	r3, [pc, #356]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a58      	ldr	r2, [pc, #352]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002208:	4b53      	ldr	r3, [pc, #332]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a52      	ldr	r2, [pc, #328]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002212:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b50      	ldr	r3, [pc, #320]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	494d      	ldr	r1, [pc, #308]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d040      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	4b47      	ldr	r3, [pc, #284]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d115      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e07f      	b.n	800234a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b41      	ldr	r3, [pc, #260]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e073      	b.n	800234a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e06b      	b.n	800234a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002272:	4b39      	ldr	r3, [pc, #228]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4936      	ldr	r1, [pc, #216]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002284:	f7ff fa2c 	bl	80016e0 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7ff fa28 	bl	80016e0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e053      	b.n	800234a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 020c 	and.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1eb      	bne.n	800228c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b4:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d210      	bcs.n	80022e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 0207 	bic.w	r2, r3, #7
 80022ca:	4922      	ldr	r1, [pc, #136]	; (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e032      	b.n	800234a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4916      	ldr	r1, [pc, #88]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	490e      	ldr	r1, [pc, #56]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002322:	f000 f821 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8002326:	4602      	mov	r2, r0
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	490a      	ldr	r1, [pc, #40]	; (800235c <HAL_RCC_ClockConfig+0x1c8>)
 8002334:	5ccb      	ldrb	r3, [r1, r3]
 8002336:	fa22 f303 	lsr.w	r3, r2, r3
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1cc>)
 800233c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x1d0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f98a 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40022000 	.word	0x40022000
 8002358:	40021000 	.word	0x40021000
 800235c:	08002cb8 	.word	0x08002cb8
 8002360:	20000054 	.word	0x20000054
 8002364:	20000058 	.word	0x20000058

08002368 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002368:	b490      	push	{r4, r7}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800236e:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002370:	1d3c      	adds	r4, r7, #4
 8002372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002378:	f240 2301 	movw	r3, #513	; 0x201
 800237c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002392:	4b22      	ldr	r3, [pc, #136]	; (800241c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x40>
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0x46>
 80023a6:	e02d      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023aa:	623b      	str	r3, [r7, #32]
      break;
 80023ac:	e02d      	b.n	800240a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	0c9b      	lsrs	r3, r3, #18
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ba:	4413      	add	r3, r2
 80023bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	0c5b      	lsrs	r3, r3, #17
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023da:	4413      	add	r3, r2
 80023dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e6:	fb02 f203 	mul.w	r2, r2, r3
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
 80023f2:	e004      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023f8:	fb02 f303 	mul.w	r3, r2, r3
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	623b      	str	r3, [r7, #32]
      break;
 8002402:	e002      	b.n	800240a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002406:	623b      	str	r3, [r7, #32]
      break;
 8002408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240a:	6a3b      	ldr	r3, [r7, #32]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3728      	adds	r7, #40	; 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bc90      	pop	{r4, r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	08002c9c 	.word	0x08002c9c
 800241c:	40021000 	.word	0x40021000
 8002420:	007a1200 	.word	0x007a1200
 8002424:	003d0900 	.word	0x003d0900

08002428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <RCC_Delay+0x34>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <RCC_Delay+0x38>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a5b      	lsrs	r3, r3, #9
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002444:	bf00      	nop
  }
  while (Delay --);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1e5a      	subs	r2, r3, #1
 800244a:	60fa      	str	r2, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f9      	bne.n	8002444 <RCC_Delay+0x1c>
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	20000054 	.word	0x20000054
 8002460:	10624dd3 	.word	0x10624dd3

08002464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e041      	b.n	80024fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe ff64 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f000 fa6a 	bl	800297c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d001      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e035      	b.n	8002588 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_TIM_Base_Start_IT+0x90>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d009      	beq.n	8002552 <HAL_TIM_Base_Start_IT+0x4e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002546:	d004      	beq.n	8002552 <HAL_TIM_Base_Start_IT+0x4e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a12      	ldr	r2, [pc, #72]	; (8002598 <HAL_TIM_Base_Start_IT+0x94>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d111      	bne.n	8002576 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b06      	cmp	r3, #6
 8002562:	d010      	beq.n	8002586 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002574:	e007      	b.n	8002586 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40000400 	.word	0x40000400

0800259c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d122      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d11b      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0202 	mvn.w	r2, #2
 80025c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f9b1 	bl	8002946 <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f9a4 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f9b3 	bl	8002958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d122      	bne.n	800264c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b04      	cmp	r3, #4
 8002612:	d11b      	bne.n	800264c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0204 	mvn.w	r2, #4
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f987 	bl	8002946 <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f97a 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f989 	bl	8002958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b08      	cmp	r3, #8
 8002658:	d122      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b08      	cmp	r3, #8
 8002666:	d11b      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0208 	mvn.w	r2, #8
 8002670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2204      	movs	r2, #4
 8002676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f95d 	bl	8002946 <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f950 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f95f 	bl	8002958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d122      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0210 	mvn.w	r2, #16
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2208      	movs	r2, #8
 80026ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f933 	bl	8002946 <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f926 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f935 	bl	8002958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0201 	mvn.w	r2, #1
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fc56 	bl	8000fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	2b80      	cmp	r3, #128	; 0x80
 800272c:	d10e      	bne.n	800274c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	2b80      	cmp	r3, #128	; 0x80
 800273a:	d107      	bne.n	800274c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa67 	bl	8002c1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	d10e      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d107      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8f9 	bl	800296a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b20      	cmp	r3, #32
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b20      	cmp	r3, #32
 8002792:	d107      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0220 	mvn.w	r2, #32
 800279c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa32 	bl	8002c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_TIM_ConfigClockSource+0x18>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e0b3      	b.n	800292c <HAL_TIM_ConfigClockSource+0x180>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fc:	d03e      	beq.n	800287c <HAL_TIM_ConfigClockSource+0xd0>
 80027fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002802:	f200 8087 	bhi.w	8002914 <HAL_TIM_ConfigClockSource+0x168>
 8002806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280a:	f000 8085 	beq.w	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002812:	d87f      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x168>
 8002814:	2b70      	cmp	r3, #112	; 0x70
 8002816:	d01a      	beq.n	800284e <HAL_TIM_ConfigClockSource+0xa2>
 8002818:	2b70      	cmp	r3, #112	; 0x70
 800281a:	d87b      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x168>
 800281c:	2b60      	cmp	r3, #96	; 0x60
 800281e:	d050      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x116>
 8002820:	2b60      	cmp	r3, #96	; 0x60
 8002822:	d877      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x168>
 8002824:	2b50      	cmp	r3, #80	; 0x50
 8002826:	d03c      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0xf6>
 8002828:	2b50      	cmp	r3, #80	; 0x50
 800282a:	d873      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x168>
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d058      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x136>
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d86f      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x168>
 8002834:	2b30      	cmp	r3, #48	; 0x30
 8002836:	d064      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x156>
 8002838:	2b30      	cmp	r3, #48	; 0x30
 800283a:	d86b      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x168>
 800283c:	2b20      	cmp	r3, #32
 800283e:	d060      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x156>
 8002840:	2b20      	cmp	r3, #32
 8002842:	d867      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x168>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d05c      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x156>
 8002848:	2b10      	cmp	r3, #16
 800284a:	d05a      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800284c:	e062      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f000 f95c 	bl	8002b1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002870:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	609a      	str	r2, [r3, #8]
      break;
 800287a:	e04e      	b.n	800291a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6899      	ldr	r1, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f000 f945 	bl	8002b1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800289e:	609a      	str	r2, [r3, #8]
      break;
 80028a0:	e03b      	b.n	800291a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f000 f8bc 	bl	8002a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2150      	movs	r1, #80	; 0x50
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f913 	bl	8002ae6 <TIM_ITRx_SetConfig>
      break;
 80028c0:	e02b      	b.n	800291a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 f8da 	bl	8002a88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2160      	movs	r1, #96	; 0x60
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f903 	bl	8002ae6 <TIM_ITRx_SetConfig>
      break;
 80028e0:	e01b      	b.n	800291a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 f89c 	bl	8002a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2140      	movs	r1, #64	; 0x40
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f8f3 	bl	8002ae6 <TIM_ITRx_SetConfig>
      break;
 8002900:	e00b      	b.n	800291a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f000 f8ea 	bl	8002ae6 <TIM_ITRx_SetConfig>
        break;
 8002912:	e002      	b.n	800291a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002914:	bf00      	nop
 8002916:	e000      	b.n	800291a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002918:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <TIM_Base_SetConfig+0xa8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d007      	beq.n	80029a4 <TIM_Base_SetConfig+0x28>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0x28>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <TIM_Base_SetConfig+0xac>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d108      	bne.n	80029b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <TIM_Base_SetConfig+0xa8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <TIM_Base_SetConfig+0x52>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d003      	beq.n	80029ce <TIM_Base_SetConfig+0x52>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <TIM_Base_SetConfig+0xac>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d108      	bne.n	80029e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <TIM_Base_SetConfig+0xa8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d103      	bne.n	8002a14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	615a      	str	r2, [r3, #20]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40000400 	.word	0x40000400

08002a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f023 0201 	bic.w	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f023 030a 	bic.w	r3, r3, #10
 8002a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	621a      	str	r2, [r3, #32]
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f023 0210 	bic.w	r2, r3, #16
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ab2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	031b      	lsls	r3, r3, #12
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	621a      	str	r2, [r3, #32]
}
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f043 0307 	orr.w	r3, r3, #7
 8002b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b087      	sub	sp, #28
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	021a      	lsls	r2, r3, #8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	609a      	str	r2, [r3, #8]
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e041      	b.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d009      	beq.n	8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbc:	d004      	beq.n	8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d10c      	bne.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40012c00 	.word	0x40012c00
 8002c04:	40000400 	.word	0x40000400

08002c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <__libc_init_array>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	2600      	movs	r6, #0
 8002c30:	4d0c      	ldr	r5, [pc, #48]	; (8002c64 <__libc_init_array+0x38>)
 8002c32:	4c0d      	ldr	r4, [pc, #52]	; (8002c68 <__libc_init_array+0x3c>)
 8002c34:	1b64      	subs	r4, r4, r5
 8002c36:	10a4      	asrs	r4, r4, #2
 8002c38:	42a6      	cmp	r6, r4
 8002c3a:	d109      	bne.n	8002c50 <__libc_init_array+0x24>
 8002c3c:	f000 f822 	bl	8002c84 <_init>
 8002c40:	2600      	movs	r6, #0
 8002c42:	4d0a      	ldr	r5, [pc, #40]	; (8002c6c <__libc_init_array+0x40>)
 8002c44:	4c0a      	ldr	r4, [pc, #40]	; (8002c70 <__libc_init_array+0x44>)
 8002c46:	1b64      	subs	r4, r4, r5
 8002c48:	10a4      	asrs	r4, r4, #2
 8002c4a:	42a6      	cmp	r6, r4
 8002c4c:	d105      	bne.n	8002c5a <__libc_init_array+0x2e>
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c54:	4798      	blx	r3
 8002c56:	3601      	adds	r6, #1
 8002c58:	e7ee      	b.n	8002c38 <__libc_init_array+0xc>
 8002c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5e:	4798      	blx	r3
 8002c60:	3601      	adds	r6, #1
 8002c62:	e7f2      	b.n	8002c4a <__libc_init_array+0x1e>
 8002c64:	08002cc8 	.word	0x08002cc8
 8002c68:	08002cc8 	.word	0x08002cc8
 8002c6c:	08002cc8 	.word	0x08002cc8
 8002c70:	08002ccc 	.word	0x08002ccc

08002c74 <memset>:
 8002c74:	4603      	mov	r3, r0
 8002c76:	4402      	add	r2, r0
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <_init>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	bf00      	nop
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr

08002c90 <_fini>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr
