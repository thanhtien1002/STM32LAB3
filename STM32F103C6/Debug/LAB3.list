
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002cb8  08002cb8  00012cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce4  08002ce4  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ce4  08002ce4  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ce4  08002ce4  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000004c  08002d38  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08002d38  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dcb  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba4  00000000  00000000  00029e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002b9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002c4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f5f  00000000  00000000  0002ce70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c57e  00000000  00000000  00043dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082551  00000000  00000000  0005034d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d289e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a64  00000000  00000000  000d28f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ca0 	.word	0x08002ca0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002ca0 	.word	0x08002ca0

0800014c <isButtonPressed>:
int KeyReg3[NUM_OF_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int TimeForKeyPress =  500;
int button_flag[NUM_OF_BUTTON] = {0, 0, 0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000068 	.word	0x20000068

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000068 	.word	0x20000068

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_OF_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e063      	b.n	8000274 <getKeyInput+0xd4>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a35      	ldr	r2, [pc, #212]	; (8000284 <getKeyInput+0xe4>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4934      	ldr	r1, [pc, #208]	; (8000288 <getKeyInput+0xe8>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    KeyReg1[i] = KeyReg0[i];
 80001bc:	4a33      	ldr	r2, [pc, #204]	; (800028c <getKeyInput+0xec>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	492f      	ldr	r1, [pc, #188]	; (8000284 <getKeyInput+0xe4>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, buttonList[i]);
 80001cc:	4a30      	ldr	r2, [pc, #192]	; (8000290 <getKeyInput+0xf0>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	482e      	ldr	r0, [pc, #184]	; (8000294 <getKeyInput+0xf4>)
 80001da:	f001 fd21 	bl	8001c20 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a2a      	ldr	r2, [pc, #168]	; (800028c <getKeyInput+0xec>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001ea:	4a26      	ldr	r2, [pc, #152]	; (8000284 <getKeyInput+0xe4>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4926      	ldr	r1, [pc, #152]	; (800028c <getKeyInput+0xec>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d137      	bne.n	800026e <getKeyInput+0xce>
 80001fe:	4a21      	ldr	r2, [pc, #132]	; (8000284 <getKeyInput+0xe4>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4920      	ldr	r1, [pc, #128]	; (8000288 <getKeyInput+0xe8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d12d      	bne.n	800026e <getKeyInput+0xce>
		   if (KeyReg2[i] != KeyReg3[i]){
 8000212:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <getKeyInput+0xe8>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	491f      	ldr	r1, [pc, #124]	; (8000298 <getKeyInput+0xf8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d015      	beq.n	8000252 <getKeyInput+0xb2>
		      KeyReg3[i] = KeyReg2[i];
 8000226:	4a18      	ldr	r2, [pc, #96]	; (8000288 <getKeyInput+0xe8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	491a      	ldr	r1, [pc, #104]	; (8000298 <getKeyInput+0xf8>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		      if (KeyReg3[i] == PRESSED_STATE){
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <getKeyInput+0xf8>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d115      	bne.n	800026e <getKeyInput+0xce>
			     TimeForKeyPress = 500;
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <getKeyInput+0xfc>)
 8000244:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000248:	601a      	str	r2, [r3, #0]
			     subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff98 	bl	8000180 <subKeyProcess>
 8000250:	e00d      	b.n	800026e <getKeyInput+0xce>
		      }
		   } else {
			   	  TimeForKeyPress--;
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <getKeyInput+0xfc>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a10      	ldr	r2, [pc, #64]	; (800029c <getKeyInput+0xfc>)
 800025a:	6013      	str	r3, [r2, #0]
			      if (TimeForKeyPress == 0){
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <getKeyInput+0xfc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d104      	bne.n	800026e <getKeyInput+0xce>
			      KeyReg3[i] = NORMAL_STATE;
 8000264:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <getKeyInput+0xf8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2101      	movs	r1, #1
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<NUM_OF_BUTTON; i++){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3301      	adds	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b02      	cmp	r3, #2
 8000278:	dd98      	ble.n	80001ac <getKeyInput+0xc>
			      }
		     }
	    }
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000018 	.word	0x20000018
 8000288:	20000024 	.word	0x20000024
 800028c:	2000000c 	.word	0x2000000c
 8000290:	20000000 	.word	0x20000000
 8000294:	40010800 	.word	0x40010800
 8000298:	20000030 	.word	0x20000030
 800029c:	2000003c 	.word	0x2000003c

080002a0 <fsm_automatic>:

#include "fsm_automatic.h"

int led_buffer[2] = {0, 0};

void fsm_automatic(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if (mode == MODE1){
 80002a4:	4b97      	ldr	r3, [pc, #604]	; (8000504 <fsm_automatic+0x264>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	f040 8189 	bne.w	80005c0 <fsm_automatic+0x320>
		// AUTO MODE 1
		switch (statusAUTO1){
 80002ae:	4b96      	ldr	r3, [pc, #600]	; (8000508 <fsm_automatic+0x268>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d86b      	bhi.n	800038e <fsm_automatic+0xee>
 80002b6:	a201      	add	r2, pc, #4	; (adr r2, 80002bc <fsm_automatic+0x1c>)
 80002b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002bc:	080002cd 	.word	0x080002cd
 80002c0:	080002db 	.word	0x080002db
 80002c4:	08000317 	.word	0x08000317
 80002c8:	08000353 	.word	0x08000353
			case INIT:
				statusAUTO1 = STATE_RED;
 80002cc:	4b8e      	ldr	r3, [pc, #568]	; (8000508 <fsm_automatic+0x268>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 80002d2:	2064      	movs	r0, #100	; 0x64
 80002d4:	f000 fe9a 	bl	800100c <setTimer1>
				break;
 80002d8:	e060      	b.n	800039c <fsm_automatic+0xfc>
			case STATE_RED:
				if (timer1_flag == 1){
 80002da:	4b8c      	ldr	r3, [pc, #560]	; (800050c <fsm_automatic+0x26c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d157      	bne.n	8000392 <fsm_automatic+0xf2>
					enableRed1();
 80002e2:	f001 f8a3 	bl	800142c <enableRed1>
					led_buffer[0] = counterRed1;
 80002e6:	4b8a      	ldr	r3, [pc, #552]	; (8000510 <fsm_automatic+0x270>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a8a      	ldr	r2, [pc, #552]	; (8000514 <fsm_automatic+0x274>)
 80002ec:	6013      	str	r3, [r2, #0]
					counterRed1--;
 80002ee:	4b88      	ldr	r3, [pc, #544]	; (8000510 <fsm_automatic+0x270>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	4a86      	ldr	r2, [pc, #536]	; (8000510 <fsm_automatic+0x270>)
 80002f6:	6013      	str	r3, [r2, #0]
					if (counterRed1 == INIT){
 80002f8:	4b85      	ldr	r3, [pc, #532]	; (8000510 <fsm_automatic+0x270>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d106      	bne.n	800030e <fsm_automatic+0x6e>
						counterRed1 = AUTO_RED;
 8000300:	4b85      	ldr	r3, [pc, #532]	; (8000518 <fsm_automatic+0x278>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a82      	ldr	r2, [pc, #520]	; (8000510 <fsm_automatic+0x270>)
 8000306:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_GREEN;
 8000308:	4b7f      	ldr	r3, [pc, #508]	; (8000508 <fsm_automatic+0x268>)
 800030a:	2202      	movs	r2, #2
 800030c:	601a      	str	r2, [r3, #0]
					}
					setTimer1(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f000 fe7c 	bl	800100c <setTimer1>
				}
				break;
 8000314:	e03d      	b.n	8000392 <fsm_automatic+0xf2>
			case STATE_GREEN:
				if (timer1_flag == 1){
 8000316:	4b7d      	ldr	r3, [pc, #500]	; (800050c <fsm_automatic+0x26c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d13b      	bne.n	8000396 <fsm_automatic+0xf6>
					enableGreen1();
 800031e:	f001 f8b1 	bl	8001484 <enableGreen1>
					led_buffer[0] = counterGreen1;
 8000322:	4b7e      	ldr	r3, [pc, #504]	; (800051c <fsm_automatic+0x27c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a7b      	ldr	r2, [pc, #492]	; (8000514 <fsm_automatic+0x274>)
 8000328:	6013      	str	r3, [r2, #0]
					counterGreen1--;
 800032a:	4b7c      	ldr	r3, [pc, #496]	; (800051c <fsm_automatic+0x27c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	3b01      	subs	r3, #1
 8000330:	4a7a      	ldr	r2, [pc, #488]	; (800051c <fsm_automatic+0x27c>)
 8000332:	6013      	str	r3, [r2, #0]
					if (counterGreen1 == INIT){
 8000334:	4b79      	ldr	r3, [pc, #484]	; (800051c <fsm_automatic+0x27c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d106      	bne.n	800034a <fsm_automatic+0xaa>
						counterGreen1 = AUTO_GREEN;
 800033c:	4b78      	ldr	r3, [pc, #480]	; (8000520 <fsm_automatic+0x280>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a76      	ldr	r2, [pc, #472]	; (800051c <fsm_automatic+0x27c>)
 8000342:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_YELLOW;
 8000344:	4b70      	ldr	r3, [pc, #448]	; (8000508 <fsm_automatic+0x268>)
 8000346:	2203      	movs	r2, #3
 8000348:	601a      	str	r2, [r3, #0]
					}
					setTimer1(100);
 800034a:	2064      	movs	r0, #100	; 0x64
 800034c:	f000 fe5e 	bl	800100c <setTimer1>
				}
				break;
 8000350:	e021      	b.n	8000396 <fsm_automatic+0xf6>
			case STATE_YELLOW:
				if (timer1_flag == 1){
 8000352:	4b6e      	ldr	r3, [pc, #440]	; (800050c <fsm_automatic+0x26c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d11f      	bne.n	800039a <fsm_automatic+0xfa>
					enableYellow1();
 800035a:	f001 f87d 	bl	8001458 <enableYellow1>
					led_buffer[0] = counterYellow1;
 800035e:	4b71      	ldr	r3, [pc, #452]	; (8000524 <fsm_automatic+0x284>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a6c      	ldr	r2, [pc, #432]	; (8000514 <fsm_automatic+0x274>)
 8000364:	6013      	str	r3, [r2, #0]
					counterYellow1--;
 8000366:	4b6f      	ldr	r3, [pc, #444]	; (8000524 <fsm_automatic+0x284>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	4a6d      	ldr	r2, [pc, #436]	; (8000524 <fsm_automatic+0x284>)
 800036e:	6013      	str	r3, [r2, #0]
					if (counterYellow1 == INIT){
 8000370:	4b6c      	ldr	r3, [pc, #432]	; (8000524 <fsm_automatic+0x284>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d106      	bne.n	8000386 <fsm_automatic+0xe6>
						counterYellow1 = AUTO_YELLOW;
 8000378:	4b6b      	ldr	r3, [pc, #428]	; (8000528 <fsm_automatic+0x288>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a69      	ldr	r2, [pc, #420]	; (8000524 <fsm_automatic+0x284>)
 800037e:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_RED;
 8000380:	4b61      	ldr	r3, [pc, #388]	; (8000508 <fsm_automatic+0x268>)
 8000382:	2201      	movs	r2, #1
 8000384:	601a      	str	r2, [r3, #0]
					}
					setTimer1(100);
 8000386:	2064      	movs	r0, #100	; 0x64
 8000388:	f000 fe40 	bl	800100c <setTimer1>
				}
				break;
 800038c:	e005      	b.n	800039a <fsm_automatic+0xfa>
			default:
				break;
 800038e:	bf00      	nop
 8000390:	e004      	b.n	800039c <fsm_automatic+0xfc>
				break;
 8000392:	bf00      	nop
 8000394:	e002      	b.n	800039c <fsm_automatic+0xfc>
				break;
 8000396:	bf00      	nop
 8000398:	e000      	b.n	800039c <fsm_automatic+0xfc>
				break;
 800039a:	bf00      	nop
		}

		// AUTO MODE 2
		switch (statusAUTO2){
 800039c:	4b63      	ldr	r3, [pc, #396]	; (800052c <fsm_automatic+0x28c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d86c      	bhi.n	800047e <fsm_automatic+0x1de>
 80003a4:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <fsm_automatic+0x10c>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	080003cb 	.word	0x080003cb
 80003b4:	08000407 	.word	0x08000407
 80003b8:	08000443 	.word	0x08000443
			case INIT:
				statusAUTO2 = STATE_GREEN;
 80003bc:	4b5b      	ldr	r3, [pc, #364]	; (800052c <fsm_automatic+0x28c>)
 80003be:	2202      	movs	r2, #2
 80003c0:	601a      	str	r2, [r3, #0]
				setTimer2(100);
 80003c2:	2064      	movs	r0, #100	; 0x64
 80003c4:	f000 fe36 	bl	8001034 <setTimer2>
				break;
 80003c8:	e060      	b.n	800048c <fsm_automatic+0x1ec>
			case STATE_RED:
				if (timer2_flag == 1){
 80003ca:	4b59      	ldr	r3, [pc, #356]	; (8000530 <fsm_automatic+0x290>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d157      	bne.n	8000482 <fsm_automatic+0x1e2>
					enableRed2();
 80003d2:	f001 f86d 	bl	80014b0 <enableRed2>
					led_buffer[1] = counterRed2;
 80003d6:	4b57      	ldr	r3, [pc, #348]	; (8000534 <fsm_automatic+0x294>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a4e      	ldr	r2, [pc, #312]	; (8000514 <fsm_automatic+0x274>)
 80003dc:	6053      	str	r3, [r2, #4]
					counterRed2--;
 80003de:	4b55      	ldr	r3, [pc, #340]	; (8000534 <fsm_automatic+0x294>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	4a53      	ldr	r2, [pc, #332]	; (8000534 <fsm_automatic+0x294>)
 80003e6:	6013      	str	r3, [r2, #0]
					if (counterRed2 == INIT){
 80003e8:	4b52      	ldr	r3, [pc, #328]	; (8000534 <fsm_automatic+0x294>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d106      	bne.n	80003fe <fsm_automatic+0x15e>
						counterRed2 = AUTO_RED;
 80003f0:	4b49      	ldr	r3, [pc, #292]	; (8000518 <fsm_automatic+0x278>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a4f      	ldr	r2, [pc, #316]	; (8000534 <fsm_automatic+0x294>)
 80003f6:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_GREEN;
 80003f8:	4b4c      	ldr	r3, [pc, #304]	; (800052c <fsm_automatic+0x28c>)
 80003fa:	2202      	movs	r2, #2
 80003fc:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 80003fe:	2064      	movs	r0, #100	; 0x64
 8000400:	f000 fe18 	bl	8001034 <setTimer2>
				}
				break;
 8000404:	e03d      	b.n	8000482 <fsm_automatic+0x1e2>
			case STATE_GREEN:
				if (timer2_flag == 1){
 8000406:	4b4a      	ldr	r3, [pc, #296]	; (8000530 <fsm_automatic+0x290>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d13b      	bne.n	8000486 <fsm_automatic+0x1e6>
					enableGreen2();
 800040e:	f001 f87b 	bl	8001508 <enableGreen2>
					led_buffer[1] = counterGreen2;
 8000412:	4b49      	ldr	r3, [pc, #292]	; (8000538 <fsm_automatic+0x298>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a3f      	ldr	r2, [pc, #252]	; (8000514 <fsm_automatic+0x274>)
 8000418:	6053      	str	r3, [r2, #4]
					counterGreen2--;
 800041a:	4b47      	ldr	r3, [pc, #284]	; (8000538 <fsm_automatic+0x298>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	4a45      	ldr	r2, [pc, #276]	; (8000538 <fsm_automatic+0x298>)
 8000422:	6013      	str	r3, [r2, #0]
					if (counterGreen2 == INIT){
 8000424:	4b44      	ldr	r3, [pc, #272]	; (8000538 <fsm_automatic+0x298>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d106      	bne.n	800043a <fsm_automatic+0x19a>
						counterGreen2 = AUTO_GREEN;
 800042c:	4b3c      	ldr	r3, [pc, #240]	; (8000520 <fsm_automatic+0x280>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a41      	ldr	r2, [pc, #260]	; (8000538 <fsm_automatic+0x298>)
 8000432:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_YELLOW;
 8000434:	4b3d      	ldr	r3, [pc, #244]	; (800052c <fsm_automatic+0x28c>)
 8000436:	2203      	movs	r2, #3
 8000438:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f000 fdfa 	bl	8001034 <setTimer2>
				}
				break;
 8000440:	e021      	b.n	8000486 <fsm_automatic+0x1e6>
			case STATE_YELLOW:
				if (timer2_flag == 1){
 8000442:	4b3b      	ldr	r3, [pc, #236]	; (8000530 <fsm_automatic+0x290>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d11f      	bne.n	800048a <fsm_automatic+0x1ea>
					enableYellow2();
 800044a:	f001 f847 	bl	80014dc <enableYellow2>
					led_buffer[1] = counterYellow2;
 800044e:	4b3b      	ldr	r3, [pc, #236]	; (800053c <fsm_automatic+0x29c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a30      	ldr	r2, [pc, #192]	; (8000514 <fsm_automatic+0x274>)
 8000454:	6053      	str	r3, [r2, #4]
					counterYellow2--;
 8000456:	4b39      	ldr	r3, [pc, #228]	; (800053c <fsm_automatic+0x29c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	4a37      	ldr	r2, [pc, #220]	; (800053c <fsm_automatic+0x29c>)
 800045e:	6013      	str	r3, [r2, #0]
					if (counterYellow2 == INIT){
 8000460:	4b36      	ldr	r3, [pc, #216]	; (800053c <fsm_automatic+0x29c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d106      	bne.n	8000476 <fsm_automatic+0x1d6>
						counterYellow2 = AUTO_YELLOW;
 8000468:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <fsm_automatic+0x288>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a33      	ldr	r2, [pc, #204]	; (800053c <fsm_automatic+0x29c>)
 800046e:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_RED;
 8000470:	4b2e      	ldr	r3, [pc, #184]	; (800052c <fsm_automatic+0x28c>)
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
					}
					setTimer2(100);
 8000476:	2064      	movs	r0, #100	; 0x64
 8000478:	f000 fddc 	bl	8001034 <setTimer2>
				}
				break;
 800047c:	e005      	b.n	800048a <fsm_automatic+0x1ea>
			default:
				break;
 800047e:	bf00      	nop
 8000480:	e004      	b.n	800048c <fsm_automatic+0x1ec>
				break;
 8000482:	bf00      	nop
 8000484:	e002      	b.n	800048c <fsm_automatic+0x1ec>
				break;
 8000486:	bf00      	nop
 8000488:	e000      	b.n	800048c <fsm_automatic+0x1ec>
				break;
 800048a:	bf00      	nop
		}

		// AUTO MODE 3 - DISPLAY WAITING TIME
		switch (statusAUTO3){
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <fsm_automatic+0x2a0>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b02      	cmp	r3, #2
 8000492:	d020      	beq.n	80004d6 <fsm_automatic+0x236>
 8000494:	2b02      	cmp	r3, #2
 8000496:	dc31      	bgt.n	80004fc <fsm_automatic+0x25c>
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <fsm_automatic+0x202>
 800049c:	2b01      	cmp	r3, #1
 800049e:	d007      	beq.n	80004b0 <fsm_automatic+0x210>
					statusAUTO3 = HIGH_DIGIT;
					setTimer3(50);
				}
				break;
			default:
				break;
 80004a0:	e02c      	b.n	80004fc <fsm_automatic+0x25c>
				statusAUTO3 = HIGH_DIGIT;
 80004a2:	4b27      	ldr	r3, [pc, #156]	; (8000540 <fsm_automatic+0x2a0>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 80004a8:	2064      	movs	r0, #100	; 0x64
 80004aa:	f000 fdd7 	bl	800105c <setTimer3>
				break;
 80004ae:	e04c      	b.n	800054a <fsm_automatic+0x2aa>
				if (timer3_flag == 1){
 80004b0:	4b24      	ldr	r3, [pc, #144]	; (8000544 <fsm_automatic+0x2a4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d123      	bne.n	8000500 <fsm_automatic+0x260>
					blinkDigit1(led_buffer[0], led_buffer[1]);
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <fsm_automatic+0x274>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a15      	ldr	r2, [pc, #84]	; (8000514 <fsm_automatic+0x274>)
 80004be:	6852      	ldr	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 fc0e 	bl	8000ce4 <blinkDigit1>
					statusAUTO3 = LOW_DIGIT;
 80004c8:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <fsm_automatic+0x2a0>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	601a      	str	r2, [r3, #0]
					setTimer3(50);
 80004ce:	2032      	movs	r0, #50	; 0x32
 80004d0:	f000 fdc4 	bl	800105c <setTimer3>
				break;
 80004d4:	e014      	b.n	8000500 <fsm_automatic+0x260>
				if (timer3_flag == 1){
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <fsm_automatic+0x2a4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d134      	bne.n	8000548 <fsm_automatic+0x2a8>
					blinkDigit2(led_buffer[0], led_buffer[1]);
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <fsm_automatic+0x274>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <fsm_automatic+0x274>)
 80004e4:	6852      	ldr	r2, [r2, #4]
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fc35 	bl	8000d58 <blinkDigit2>
					statusAUTO3 = HIGH_DIGIT;
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <fsm_automatic+0x2a0>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
					setTimer3(50);
 80004f4:	2032      	movs	r0, #50	; 0x32
 80004f6:	f000 fdb1 	bl	800105c <setTimer3>
				break;
 80004fa:	e025      	b.n	8000548 <fsm_automatic+0x2a8>
				break;
 80004fc:	bf00      	nop
 80004fe:	e024      	b.n	800054a <fsm_automatic+0x2aa>
				break;
 8000500:	bf00      	nop
 8000502:	e022      	b.n	800054a <fsm_automatic+0x2aa>
 8000504:	2000007c 	.word	0x2000007c
 8000508:	20000080 	.word	0x20000080
 800050c:	200000dc 	.word	0x200000dc
 8000510:	200000c0 	.word	0x200000c0
 8000514:	20000074 	.word	0x20000074
 8000518:	200000b4 	.word	0x200000b4
 800051c:	200000c4 	.word	0x200000c4
 8000520:	200000b8 	.word	0x200000b8
 8000524:	200000c8 	.word	0x200000c8
 8000528:	200000bc 	.word	0x200000bc
 800052c:	20000084 	.word	0x20000084
 8000530:	200000e4 	.word	0x200000e4
 8000534:	200000cc 	.word	0x200000cc
 8000538:	200000d0 	.word	0x200000d0
 800053c:	200000d4 	.word	0x200000d4
 8000540:	20000088 	.word	0x20000088
 8000544:	200000ec 	.word	0x200000ec
				break;
 8000548:	bf00      	nop
		}

		// AUTO MODE 4
		switch(statusAUTO4){
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <fsm_automatic+0x338>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b04      	cmp	r3, #4
 8000550:	d838      	bhi.n	80005c4 <fsm_automatic+0x324>
 8000552:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <fsm_automatic+0x2b8>)
 8000554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000558:	0800056d 	.word	0x0800056d
 800055c:	080005c5 	.word	0x080005c5
 8000560:	08000581 	.word	0x08000581
 8000564:	08000595 	.word	0x08000595
 8000568:	080005a9 	.word	0x080005a9
			case INIT:
				if (isButtonPressed(BUTTON1)==1)
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff fded 	bl	800014c <isButtonPressed>
 8000572:	4603      	mov	r3, r0
 8000574:	2b01      	cmp	r3, #1
 8000576:	d127      	bne.n	80005c8 <fsm_automatic+0x328>
					mode = MODE2;
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <fsm_automatic+0x33c>)
 800057a:	2202      	movs	r2, #2
 800057c:	601a      	str	r2, [r3, #0]
				break;
 800057e:	e023      	b.n	80005c8 <fsm_automatic+0x328>
			case MODE2:
				if (isButtonPressed(BUTTON1)==1)
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff fde3 	bl	800014c <isButtonPressed>
 8000586:	4603      	mov	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d11f      	bne.n	80005cc <fsm_automatic+0x32c>
					mode = MODE3;
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <fsm_automatic+0x33c>)
 800058e:	2203      	movs	r2, #3
 8000590:	601a      	str	r2, [r3, #0]
				break;
 8000592:	e01b      	b.n	80005cc <fsm_automatic+0x32c>
			case MODE3:
				if (isButtonPressed(BUTTON1)==1)
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fdd9 	bl	800014c <isButtonPressed>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d117      	bne.n	80005d0 <fsm_automatic+0x330>
					mode = MODE4;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <fsm_automatic+0x33c>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	601a      	str	r2, [r3, #0]
				break;
 80005a6:	e013      	b.n	80005d0 <fsm_automatic+0x330>
			case MODE4:
				if (isButtonPressed(BUTTON1)==1)
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff fdcf 	bl	800014c <isButtonPressed>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d102      	bne.n	80005ba <fsm_automatic+0x31a>
					mode = MODE1;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <fsm_automatic+0x33c>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
				initVar();
 80005ba:	f000 fa3f 	bl	8000a3c <initVar>
				break;
 80005be:	e008      	b.n	80005d2 <fsm_automatic+0x332>
			default:
				break;
		}
	}
 80005c0:	bf00      	nop
 80005c2:	e006      	b.n	80005d2 <fsm_automatic+0x332>
				break;
 80005c4:	bf00      	nop
 80005c6:	e004      	b.n	80005d2 <fsm_automatic+0x332>
				break;
 80005c8:	bf00      	nop
 80005ca:	e002      	b.n	80005d2 <fsm_automatic+0x332>
				break;
 80005cc:	bf00      	nop
 80005ce:	e000      	b.n	80005d2 <fsm_automatic+0x332>
				break;
 80005d0:	bf00      	nop
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000008c 	.word	0x2000008c
 80005dc:	2000007c 	.word	0x2000007c

080005e0 <fsm_manual>:
 *      Author: ASUS
 */

#include "fsm_manual.h"

void fsm_manual(void) { // START IN MANUAL MODE
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

    // CONFIG RED (MODE2)
    if (mode == MODE2) {
 80005e4:	4b9e      	ldr	r3, [pc, #632]	; (8000860 <fsm_manual+0x280>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	f040 809f 	bne.w	800072c <fsm_manual+0x14c>
        // Blink LED RED
        switch (statusMODE2_1) {
 80005ee:	4b9d      	ldr	r3, [pc, #628]	; (8000864 <fsm_manual+0x284>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <fsm_manual+0x1c>
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d007      	beq.n	800060a <fsm_manual+0x2a>
                    toggleREDs();
                    setTimer4(25);
                }
                break;
            default:
                break;
 80005fa:	e010      	b.n	800061e <fsm_manual+0x3e>
                statusMODE2_1 = TOGGLE;
 80005fc:	4b99      	ldr	r3, [pc, #612]	; (8000864 <fsm_manual+0x284>)
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
                setTimer4(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fd3e 	bl	8001084 <setTimer4>
                break;
 8000608:	e009      	b.n	800061e <fsm_manual+0x3e>
                if (timer4_flag == 1) {
 800060a:	4b97      	ldr	r3, [pc, #604]	; (8000868 <fsm_manual+0x288>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d104      	bne.n	800061c <fsm_manual+0x3c>
                    toggleREDs();
 8000612:	f000 ff8f 	bl	8001534 <toggleREDs>
                    setTimer4(25);
 8000616:	2019      	movs	r0, #25
 8000618:	f000 fd34 	bl	8001084 <setTimer4>
                break;
 800061c:	bf00      	nop
        }

        // Display Digit Red and Value
        switch (statusMODE2_2) {
 800061e:	4b93      	ldr	r3, [pc, #588]	; (800086c <fsm_manual+0x28c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d020      	beq.n	8000668 <fsm_manual+0x88>
 8000626:	2b02      	cmp	r3, #2
 8000628:	dc31      	bgt.n	800068e <fsm_manual+0xae>
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <fsm_manual+0x54>
 800062e:	2b01      	cmp	r3, #1
 8000630:	d007      	beq.n	8000642 <fsm_manual+0x62>
                    statusMODE2_2 = HIGH_DIGIT;
                    setTimer5(25);
                }
                break;
            default:
                break;
 8000632:	e02c      	b.n	800068e <fsm_manual+0xae>
                statusMODE2_2 = HIGH_DIGIT;
 8000634:	4b8d      	ldr	r3, [pc, #564]	; (800086c <fsm_manual+0x28c>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
                setTimer5(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f000 fd36 	bl	80010ac <setTimer5>
                break;
 8000640:	e02a      	b.n	8000698 <fsm_manual+0xb8>
                if (timer5_flag == 1) {
 8000642:	4b8b      	ldr	r3, [pc, #556]	; (8000870 <fsm_manual+0x290>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d123      	bne.n	8000692 <fsm_manual+0xb2>
                    blinkDigit1(mode, AUTO_RED);
 800064a:	4b85      	ldr	r3, [pc, #532]	; (8000860 <fsm_manual+0x280>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a89      	ldr	r2, [pc, #548]	; (8000874 <fsm_manual+0x294>)
 8000650:	6812      	ldr	r2, [r2, #0]
 8000652:	4611      	mov	r1, r2
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fb45 	bl	8000ce4 <blinkDigit1>
                    statusMODE2_2 = LOW_DIGIT;
 800065a:	4b84      	ldr	r3, [pc, #528]	; (800086c <fsm_manual+0x28c>)
 800065c:	2202      	movs	r2, #2
 800065e:	601a      	str	r2, [r3, #0]
                    setTimer5(25);
 8000660:	2019      	movs	r0, #25
 8000662:	f000 fd23 	bl	80010ac <setTimer5>
                break;
 8000666:	e014      	b.n	8000692 <fsm_manual+0xb2>
                if (timer5_flag == 1) {
 8000668:	4b81      	ldr	r3, [pc, #516]	; (8000870 <fsm_manual+0x290>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d112      	bne.n	8000696 <fsm_manual+0xb6>
                    blinkDigit2(mode, AUTO_RED);
 8000670:	4b7b      	ldr	r3, [pc, #492]	; (8000860 <fsm_manual+0x280>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a7f      	ldr	r2, [pc, #508]	; (8000874 <fsm_manual+0x294>)
 8000676:	6812      	ldr	r2, [r2, #0]
 8000678:	4611      	mov	r1, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fb6c 	bl	8000d58 <blinkDigit2>
                    statusMODE2_2 = HIGH_DIGIT;
 8000680:	4b7a      	ldr	r3, [pc, #488]	; (800086c <fsm_manual+0x28c>)
 8000682:	2201      	movs	r2, #1
 8000684:	601a      	str	r2, [r3, #0]
                    setTimer5(25);
 8000686:	2019      	movs	r0, #25
 8000688:	f000 fd10 	bl	80010ac <setTimer5>
                break;
 800068c:	e003      	b.n	8000696 <fsm_manual+0xb6>
                break;
 800068e:	bf00      	nop
 8000690:	e002      	b.n	8000698 <fsm_manual+0xb8>
                break;
 8000692:	bf00      	nop
 8000694:	e000      	b.n	8000698 <fsm_manual+0xb8>
                break;
 8000696:	bf00      	nop
        }

        // Change time for mode
        switch (statusMODE2_3) {
 8000698:	4b77      	ldr	r3, [pc, #476]	; (8000878 <fsm_manual+0x298>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b04      	cmp	r3, #4
 800069e:	d031      	beq.n	8000704 <fsm_manual+0x124>
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	dc35      	bgt.n	8000710 <fsm_manual+0x130>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <fsm_manual+0xce>
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d00f      	beq.n	80006cc <fsm_manual+0xec>
            case SAVE:
                mode = MODE1;
                initVar();
                break;
            default:
                break;
 80006ac:	e030      	b.n	8000710 <fsm_manual+0x130>
                if (isButtonPressed(BUTTON2) == 1) {
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff fd4c 	bl	800014c <isButtonPressed>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d12c      	bne.n	8000714 <fsm_manual+0x134>
                    statusMODE2_3 = INCREASE;
 80006ba:	4b6f      	ldr	r3, [pc, #444]	; (8000878 <fsm_manual+0x298>)
 80006bc:	2202      	movs	r2, #2
 80006be:	601a      	str	r2, [r3, #0]
                    AUTO_RED++;
 80006c0:	4b6c      	ldr	r3, [pc, #432]	; (8000874 <fsm_manual+0x294>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a6b      	ldr	r2, [pc, #428]	; (8000874 <fsm_manual+0x294>)
 80006c8:	6013      	str	r3, [r2, #0]
                break;
 80006ca:	e023      	b.n	8000714 <fsm_manual+0x134>
                if (isButtonPressed(BUTTON2) == 1) {
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff fd3d 	bl	800014c <isButtonPressed>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d10b      	bne.n	80006f0 <fsm_manual+0x110>
                    AUTO_RED += 1;
 80006d8:	4b66      	ldr	r3, [pc, #408]	; (8000874 <fsm_manual+0x294>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4a65      	ldr	r2, [pc, #404]	; (8000874 <fsm_manual+0x294>)
 80006e0:	6013      	str	r3, [r2, #0]
                    if (AUTO_RED > UPPER_BOUND) AUTO_RED = UPPER_BOUND;
 80006e2:	4b64      	ldr	r3, [pc, #400]	; (8000874 <fsm_manual+0x294>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b63      	cmp	r3, #99	; 0x63
 80006e8:	dd02      	ble.n	80006f0 <fsm_manual+0x110>
 80006ea:	4b62      	ldr	r3, [pc, #392]	; (8000874 <fsm_manual+0x294>)
 80006ec:	2263      	movs	r2, #99	; 0x63
 80006ee:	601a      	str	r2, [r3, #0]
                if (isButtonPressed(BUTTON3) == 1) {
 80006f0:	2002      	movs	r0, #2
 80006f2:	f7ff fd2b 	bl	800014c <isButtonPressed>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d10d      	bne.n	8000718 <fsm_manual+0x138>
                    statusMODE2_3 = SAVE;
 80006fc:	4b5e      	ldr	r3, [pc, #376]	; (8000878 <fsm_manual+0x298>)
 80006fe:	2204      	movs	r2, #4
 8000700:	601a      	str	r2, [r3, #0]
                break;
 8000702:	e009      	b.n	8000718 <fsm_manual+0x138>
                mode = MODE1;
 8000704:	4b56      	ldr	r3, [pc, #344]	; (8000860 <fsm_manual+0x280>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
                initVar();
 800070a:	f000 f997 	bl	8000a3c <initVar>
                break;
 800070e:	e004      	b.n	800071a <fsm_manual+0x13a>
                break;
 8000710:	bf00      	nop
 8000712:	e002      	b.n	800071a <fsm_manual+0x13a>
                break;
 8000714:	bf00      	nop
 8000716:	e000      	b.n	800071a <fsm_manual+0x13a>
                break;
 8000718:	bf00      	nop
        }

        // Continue to MODE3
        if (isButtonPressed(BUTTON1) == 1) {
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff fd16 	bl	800014c <isButtonPressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d102      	bne.n	800072c <fsm_manual+0x14c>
            mode = MODE3;
 8000726:	4b4e      	ldr	r3, [pc, #312]	; (8000860 <fsm_manual+0x280>)
 8000728:	2203      	movs	r2, #3
 800072a:	601a      	str	r2, [r3, #0]
        }
    }

    // CONFIG GREEN (MODE3)
    if (mode == MODE3) {
 800072c:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <fsm_manual+0x280>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b03      	cmp	r3, #3
 8000732:	f040 80b9 	bne.w	80008a8 <fsm_manual+0x2c8>
        // Blink LED GREEN
        switch (statusMODE3_1) {
 8000736:	4b51      	ldr	r3, [pc, #324]	; (800087c <fsm_manual+0x29c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d002      	beq.n	8000744 <fsm_manual+0x164>
 800073e:	2b01      	cmp	r3, #1
 8000740:	d007      	beq.n	8000752 <fsm_manual+0x172>
                    toggleGREENs();
                    setTimer6(25);
                }
                break;
            default:
                break;
 8000742:	e010      	b.n	8000766 <fsm_manual+0x186>
                statusMODE3_1 = TOGGLE;
 8000744:	4b4d      	ldr	r3, [pc, #308]	; (800087c <fsm_manual+0x29c>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
                setTimer6(1);
 800074a:	2001      	movs	r0, #1
 800074c:	f000 fcc2 	bl	80010d4 <setTimer6>
                break;
 8000750:	e009      	b.n	8000766 <fsm_manual+0x186>
                if (timer6_flag == 1) {
 8000752:	4b4b      	ldr	r3, [pc, #300]	; (8000880 <fsm_manual+0x2a0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d104      	bne.n	8000764 <fsm_manual+0x184>
                    toggleGREENs();
 800075a:	f000 ff0d 	bl	8001578 <toggleGREENs>
                    setTimer6(25);
 800075e:	2019      	movs	r0, #25
 8000760:	f000 fcb8 	bl	80010d4 <setTimer6>
                break;
 8000764:	bf00      	nop
        }

        // Display Digit Green and Value
        switch (statusMODE3_2) {
 8000766:	4b47      	ldr	r3, [pc, #284]	; (8000884 <fsm_manual+0x2a4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d020      	beq.n	80007b0 <fsm_manual+0x1d0>
 800076e:	2b02      	cmp	r3, #2
 8000770:	dc31      	bgt.n	80007d6 <fsm_manual+0x1f6>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <fsm_manual+0x19c>
 8000776:	2b01      	cmp	r3, #1
 8000778:	d007      	beq.n	800078a <fsm_manual+0x1aa>
                    statusMODE3_2 = HIGH_DIGIT;
                    setTimer7(25);
                }
                break;
            default:
                break;
 800077a:	e02c      	b.n	80007d6 <fsm_manual+0x1f6>
                statusMODE3_2 = HIGH_DIGIT;
 800077c:	4b41      	ldr	r3, [pc, #260]	; (8000884 <fsm_manual+0x2a4>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
                setTimer7(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f000 fcba 	bl	80010fc <setTimer7>
                break;
 8000788:	e02a      	b.n	80007e0 <fsm_manual+0x200>
                if (timer7_flag == 1) {
 800078a:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <fsm_manual+0x2a8>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d123      	bne.n	80007da <fsm_manual+0x1fa>
                    blinkDigit1(mode, AUTO_GREEN);
 8000792:	4b33      	ldr	r3, [pc, #204]	; (8000860 <fsm_manual+0x280>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a3d      	ldr	r2, [pc, #244]	; (800088c <fsm_manual+0x2ac>)
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f000 faa1 	bl	8000ce4 <blinkDigit1>
                    statusMODE3_2 = LOW_DIGIT;
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <fsm_manual+0x2a4>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	601a      	str	r2, [r3, #0]
                    setTimer7(25);
 80007a8:	2019      	movs	r0, #25
 80007aa:	f000 fca7 	bl	80010fc <setTimer7>
                break;
 80007ae:	e014      	b.n	80007da <fsm_manual+0x1fa>
                if (timer7_flag == 1) {
 80007b0:	4b35      	ldr	r3, [pc, #212]	; (8000888 <fsm_manual+0x2a8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d112      	bne.n	80007de <fsm_manual+0x1fe>
                    blinkDigit2(mode, AUTO_GREEN);
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <fsm_manual+0x280>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a33      	ldr	r2, [pc, #204]	; (800088c <fsm_manual+0x2ac>)
 80007be:	6812      	ldr	r2, [r2, #0]
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fac8 	bl	8000d58 <blinkDigit2>
                    statusMODE3_2 = HIGH_DIGIT;
 80007c8:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <fsm_manual+0x2a4>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
                    setTimer7(25);
 80007ce:	2019      	movs	r0, #25
 80007d0:	f000 fc94 	bl	80010fc <setTimer7>
                break;
 80007d4:	e003      	b.n	80007de <fsm_manual+0x1fe>
                break;
 80007d6:	bf00      	nop
 80007d8:	e002      	b.n	80007e0 <fsm_manual+0x200>
                break;
 80007da:	bf00      	nop
 80007dc:	e000      	b.n	80007e0 <fsm_manual+0x200>
                break;
 80007de:	bf00      	nop
        }

        // Change time for mode
        switch (statusMODE3_3) {
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <fsm_manual+0x2b0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d031      	beq.n	800084c <fsm_manual+0x26c>
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	dc35      	bgt.n	8000858 <fsm_manual+0x278>
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <fsm_manual+0x216>
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d00f      	beq.n	8000814 <fsm_manual+0x234>
            case SAVE:
                mode = MODE1;
                initVar();
                break;
            default:
                break;
 80007f4:	e030      	b.n	8000858 <fsm_manual+0x278>
                if (isButtonPressed(BUTTON2) == 1) {
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff fca8 	bl	800014c <isButtonPressed>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d12c      	bne.n	800085c <fsm_manual+0x27c>
                    statusMODE3_3 = INCREASE;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <fsm_manual+0x2b0>)
 8000804:	2202      	movs	r2, #2
 8000806:	601a      	str	r2, [r3, #0]
                    AUTO_GREEN++;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <fsm_manual+0x2ac>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	4a1f      	ldr	r2, [pc, #124]	; (800088c <fsm_manual+0x2ac>)
 8000810:	6013      	str	r3, [r2, #0]
                break;
 8000812:	e023      	b.n	800085c <fsm_manual+0x27c>
                if (isButtonPressed(BUTTON2) == 1) {
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fc99 	bl	800014c <isButtonPressed>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10b      	bne.n	8000838 <fsm_manual+0x258>
                    AUTO_GREEN += 1;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <fsm_manual+0x2ac>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	4a19      	ldr	r2, [pc, #100]	; (800088c <fsm_manual+0x2ac>)
 8000828:	6013      	str	r3, [r2, #0]
                    if (AUTO_GREEN > UPPER_BOUND) AUTO_GREEN = UPPER_BOUND;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <fsm_manual+0x2ac>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b63      	cmp	r3, #99	; 0x63
 8000830:	dd02      	ble.n	8000838 <fsm_manual+0x258>
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <fsm_manual+0x2ac>)
 8000834:	2263      	movs	r2, #99	; 0x63
 8000836:	601a      	str	r2, [r3, #0]
                if (isButtonPressed(BUTTON3) == 1) {
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff fc87 	bl	800014c <isButtonPressed>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d127      	bne.n	8000894 <fsm_manual+0x2b4>
                    statusMODE3_3 = SAVE;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <fsm_manual+0x2b0>)
 8000846:	2204      	movs	r2, #4
 8000848:	601a      	str	r2, [r3, #0]
                break;
 800084a:	e023      	b.n	8000894 <fsm_manual+0x2b4>
                mode = MODE1;
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <fsm_manual+0x280>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
                initVar();
 8000852:	f000 f8f3 	bl	8000a3c <initVar>
                break;
 8000856:	e01e      	b.n	8000896 <fsm_manual+0x2b6>
                break;
 8000858:	bf00      	nop
 800085a:	e01c      	b.n	8000896 <fsm_manual+0x2b6>
                break;
 800085c:	bf00      	nop
 800085e:	e01a      	b.n	8000896 <fsm_manual+0x2b6>
 8000860:	2000007c 	.word	0x2000007c
 8000864:	20000090 	.word	0x20000090
 8000868:	200000f4 	.word	0x200000f4
 800086c:	20000094 	.word	0x20000094
 8000870:	200000fc 	.word	0x200000fc
 8000874:	200000b4 	.word	0x200000b4
 8000878:	20000098 	.word	0x20000098
 800087c:	2000009c 	.word	0x2000009c
 8000880:	20000104 	.word	0x20000104
 8000884:	200000a0 	.word	0x200000a0
 8000888:	2000010c 	.word	0x2000010c
 800088c:	200000b8 	.word	0x200000b8
 8000890:	200000a4 	.word	0x200000a4
                break;
 8000894:	bf00      	nop
        }

        // Continue to MODE4
        if (isButtonPressed(BUTTON1) == 1) {
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fc58 	bl	800014c <isButtonPressed>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d102      	bne.n	80008a8 <fsm_manual+0x2c8>
            mode = MODE4;
 80008a2:	4b54      	ldr	r3, [pc, #336]	; (80009f4 <fsm_manual+0x414>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	601a      	str	r2, [r3, #0]
        }
    }

    // CONFIG YELLOW (MODE4)
    if (mode == MODE4) {
 80008a8:	4b52      	ldr	r3, [pc, #328]	; (80009f4 <fsm_manual+0x414>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	f040 809f 	bne.w	80009f0 <fsm_manual+0x410>
        // Blink LED YELLOW
        switch (statusMODE4_1) {
 80008b2:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <fsm_manual+0x418>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <fsm_manual+0x2e0>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d007      	beq.n	80008ce <fsm_manual+0x2ee>
                    toggleYELLOWs();
                    setTimer8(25);
                }
                break;
            default:
                break;
 80008be:	e010      	b.n	80008e2 <fsm_manual+0x302>
                statusMODE4_1 = TOGGLE;
 80008c0:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <fsm_manual+0x418>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
                setTimer8(1);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fc2c 	bl	8001124 <setTimer8>
                break;
 80008cc:	e009      	b.n	80008e2 <fsm_manual+0x302>
                if (timer8_flag == 1) {
 80008ce:	4b4b      	ldr	r3, [pc, #300]	; (80009fc <fsm_manual+0x41c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d104      	bne.n	80008e0 <fsm_manual+0x300>
                    toggleYELLOWs();
 80008d6:	f000 fe71 	bl	80015bc <toggleYELLOWs>
                    setTimer8(25);
 80008da:	2019      	movs	r0, #25
 80008dc:	f000 fc22 	bl	8001124 <setTimer8>
                break;
 80008e0:	bf00      	nop
        }

        // Display Digit Yellow and Value
        switch (statusMODE4_2) {
 80008e2:	4b47      	ldr	r3, [pc, #284]	; (8000a00 <fsm_manual+0x420>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d020      	beq.n	800092c <fsm_manual+0x34c>
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	dc31      	bgt.n	8000952 <fsm_manual+0x372>
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <fsm_manual+0x318>
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d007      	beq.n	8000906 <fsm_manual+0x326>
                    statusMODE4_2 = HIGH_DIGIT;
                    setTimer9(25);
                }
                break;
            default:
                break;
 80008f6:	e02c      	b.n	8000952 <fsm_manual+0x372>
                statusMODE4_2 = HIGH_DIGIT;
 80008f8:	4b41      	ldr	r3, [pc, #260]	; (8000a00 <fsm_manual+0x420>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
                setTimer9(1);
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 fc24 	bl	800114c <setTimer9>
                break;
 8000904:	e02a      	b.n	800095c <fsm_manual+0x37c>
                if (timer9_flag == 1) {
 8000906:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <fsm_manual+0x424>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d123      	bne.n	8000956 <fsm_manual+0x376>
                    blinkDigit1(mode, AUTO_YELLOW);
 800090e:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <fsm_manual+0x414>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a3d      	ldr	r2, [pc, #244]	; (8000a08 <fsm_manual+0x428>)
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f9e3 	bl	8000ce4 <blinkDigit1>
                    statusMODE4_2 = LOW_DIGIT;
 800091e:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <fsm_manual+0x420>)
 8000920:	2202      	movs	r2, #2
 8000922:	601a      	str	r2, [r3, #0]
                    setTimer9(25);
 8000924:	2019      	movs	r0, #25
 8000926:	f000 fc11 	bl	800114c <setTimer9>
                break;
 800092a:	e014      	b.n	8000956 <fsm_manual+0x376>
                if (timer9_flag == 1) {
 800092c:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <fsm_manual+0x424>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d112      	bne.n	800095a <fsm_manual+0x37a>
                    blinkDigit2(mode, AUTO_YELLOW);
 8000934:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <fsm_manual+0x414>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a33      	ldr	r2, [pc, #204]	; (8000a08 <fsm_manual+0x428>)
 800093a:	6812      	ldr	r2, [r2, #0]
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fa0a 	bl	8000d58 <blinkDigit2>
                    statusMODE4_2 = HIGH_DIGIT;
 8000944:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <fsm_manual+0x420>)
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
                    setTimer9(25);
 800094a:	2019      	movs	r0, #25
 800094c:	f000 fbfe 	bl	800114c <setTimer9>
                break;
 8000950:	e003      	b.n	800095a <fsm_manual+0x37a>
                break;
 8000952:	bf00      	nop
 8000954:	e002      	b.n	800095c <fsm_manual+0x37c>
                break;
 8000956:	bf00      	nop
 8000958:	e000      	b.n	800095c <fsm_manual+0x37c>
                break;
 800095a:	bf00      	nop
        }

        // Change time for mode
        switch (statusMODE4_3) {
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <fsm_manual+0x42c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b04      	cmp	r3, #4
 8000962:	d031      	beq.n	80009c8 <fsm_manual+0x3e8>
 8000964:	2b04      	cmp	r3, #4
 8000966:	dc35      	bgt.n	80009d4 <fsm_manual+0x3f4>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <fsm_manual+0x392>
 800096c:	2b02      	cmp	r3, #2
 800096e:	d00f      	beq.n	8000990 <fsm_manual+0x3b0>
            case SAVE:
                mode = MODE1;
                initVar();
                break;
            default:
                break;
 8000970:	e030      	b.n	80009d4 <fsm_manual+0x3f4>
                if (isButtonPressed(BUTTON2) == 1) {
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff fbea 	bl	800014c <isButtonPressed>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d12c      	bne.n	80009d8 <fsm_manual+0x3f8>
                    statusMODE4_3 = INCREASE;
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <fsm_manual+0x42c>)
 8000980:	2202      	movs	r2, #2
 8000982:	601a      	str	r2, [r3, #0]
                    AUTO_YELLOW++;
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <fsm_manual+0x428>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <fsm_manual+0x428>)
 800098c:	6013      	str	r3, [r2, #0]
                break;
 800098e:	e023      	b.n	80009d8 <fsm_manual+0x3f8>
                if (isButtonPressed(BUTTON2) == 1) {
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff fbdb 	bl	800014c <isButtonPressed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10b      	bne.n	80009b4 <fsm_manual+0x3d4>
                    AUTO_YELLOW += 1;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <fsm_manual+0x428>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <fsm_manual+0x428>)
 80009a4:	6013      	str	r3, [r2, #0]
                    if (AUTO_YELLOW > UPPER_BOUND) AUTO_YELLOW = UPPER_BOUND;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <fsm_manual+0x428>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b63      	cmp	r3, #99	; 0x63
 80009ac:	dd02      	ble.n	80009b4 <fsm_manual+0x3d4>
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <fsm_manual+0x428>)
 80009b0:	2263      	movs	r2, #99	; 0x63
 80009b2:	601a      	str	r2, [r3, #0]
                if (isButtonPressed(BUTTON3) == 1) {
 80009b4:	2002      	movs	r0, #2
 80009b6:	f7ff fbc9 	bl	800014c <isButtonPressed>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d10d      	bne.n	80009dc <fsm_manual+0x3fc>
                    statusMODE4_3 = SAVE;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <fsm_manual+0x42c>)
 80009c2:	2204      	movs	r2, #4
 80009c4:	601a      	str	r2, [r3, #0]
                break;
 80009c6:	e009      	b.n	80009dc <fsm_manual+0x3fc>
                mode = MODE1;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <fsm_manual+0x414>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
                initVar();
 80009ce:	f000 f835 	bl	8000a3c <initVar>
                break;
 80009d2:	e004      	b.n	80009de <fsm_manual+0x3fe>
                break;
 80009d4:	bf00      	nop
 80009d6:	e002      	b.n	80009de <fsm_manual+0x3fe>
                break;
 80009d8:	bf00      	nop
 80009da:	e000      	b.n	80009de <fsm_manual+0x3fe>
                break;
 80009dc:	bf00      	nop
        }

        // Return to MODE1
        if (isButtonPressed(BUTTON1) == 1) {
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff fbb4 	bl	800014c <isButtonPressed>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d102      	bne.n	80009f0 <fsm_manual+0x410>
            mode = MODE1;
 80009ea:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <fsm_manual+0x414>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
        }
    }
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000007c 	.word	0x2000007c
 80009f8:	200000a8 	.word	0x200000a8
 80009fc:	20000114 	.word	0x20000114
 8000a00:	200000ac 	.word	0x200000ac
 8000a04:	2000011c 	.word	0x2000011c
 8000a08:	200000bc 	.word	0x200000bc
 8000a0c:	200000b0 	.word	0x200000b0

08000a10 <initWaitingTime>:

int counterRed2 = 0;
int counterGreen2 = 0;
int counterYellow2 = 0;

void initWaitingTime(void){
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	AUTO_RED = 25;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <initWaitingTime+0x20>)
 8000a16:	2219      	movs	r2, #25
 8000a18:	601a      	str	r2, [r3, #0]
	AUTO_GREEN = 18;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <initWaitingTime+0x24>)
 8000a1c:	2212      	movs	r2, #18
 8000a1e:	601a      	str	r2, [r3, #0]
	AUTO_YELLOW = 3;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <initWaitingTime+0x28>)
 8000a22:	2203      	movs	r2, #3
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200000b4 	.word	0x200000b4
 8000a34:	200000b8 	.word	0x200000b8
 8000a38:	200000bc 	.word	0x200000bc

08000a3c <initVar>:

void initVar(void){
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	mode = MODE1;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <initVar+0x90>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]

	statusAUTO1 = INIT;
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <initVar+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
	statusAUTO2 = INIT;
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <initVar+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
	statusAUTO3 = INIT;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <initVar+0x9c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
	statusAUTO4 = INIT;
 8000a58:	4b20      	ldr	r3, [pc, #128]	; (8000adc <initVar+0xa0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]

	statusMODE2_1 = INIT;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <initVar+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
	statusMODE2_2 = INIT;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <initVar+0xa8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
	statusMODE2_3 = INIT;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <initVar+0xac>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]

	statusMODE3_1 = INIT;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <initVar+0xb0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
	statusMODE3_2 = INIT;
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <initVar+0xb4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
	statusMODE3_3 = INIT;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <initVar+0xb8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]

	statusMODE4_1 = INIT;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <initVar+0xbc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
	statusMODE4_2 = INIT;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <initVar+0xc0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
	statusMODE4_3 = INIT;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <initVar+0xc4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]

	counterRed1 = AUTO_RED;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <initVar+0xc8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <initVar+0xcc>)
 8000a9a:	6013      	str	r3, [r2, #0]
	counterGreen1 = AUTO_GREEN;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <initVar+0xd0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <initVar+0xd4>)
 8000aa2:	6013      	str	r3, [r2, #0]
	counterYellow1 = AUTO_YELLOW;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <initVar+0xd8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <initVar+0xdc>)
 8000aaa:	6013      	str	r3, [r2, #0]

	counterRed2 = AUTO_RED;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <initVar+0xc8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <initVar+0xe0>)
 8000ab2:	6013      	str	r3, [r2, #0]
	counterGreen2 = AUTO_GREEN;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <initVar+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <initVar+0xe4>)
 8000aba:	6013      	str	r3, [r2, #0]
	counterYellow2 = AUTO_YELLOW;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <initVar+0xd8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <initVar+0xe8>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	2000007c 	.word	0x2000007c
 8000ad0:	20000080 	.word	0x20000080
 8000ad4:	20000084 	.word	0x20000084
 8000ad8:	20000088 	.word	0x20000088
 8000adc:	2000008c 	.word	0x2000008c
 8000ae0:	20000090 	.word	0x20000090
 8000ae4:	20000094 	.word	0x20000094
 8000ae8:	20000098 	.word	0x20000098
 8000aec:	2000009c 	.word	0x2000009c
 8000af0:	200000a0 	.word	0x200000a0
 8000af4:	200000a4 	.word	0x200000a4
 8000af8:	200000a8 	.word	0x200000a8
 8000afc:	200000ac 	.word	0x200000ac
 8000b00:	200000b0 	.word	0x200000b0
 8000b04:	200000b4 	.word	0x200000b4
 8000b08:	200000c0 	.word	0x200000c0
 8000b0c:	200000b8 	.word	0x200000b8
 8000b10:	200000c4 	.word	0x200000c4
 8000b14:	200000bc 	.word	0x200000bc
 8000b18:	200000c8 	.word	0x200000c8
 8000b1c:	200000cc 	.word	0x200000cc
 8000b20:	200000d0 	.word	0x200000d0
 8000b24:	200000d4 	.word	0x200000d4

08000b28 <display7SEG1>:
		, 0x02 //6
		, 0x78 //7
		, 0x00 //8
		, 0x10 /*9*/};

void display7SEG1(int num){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, ((sevenSegTable[num]>>0)&0x01));
 8000b30:	4a31      	ldr	r2, [pc, #196]	; (8000bf8 <display7SEG1+0xd0>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	2101      	movs	r1, #1
 8000b42:	482e      	ldr	r0, [pc, #184]	; (8000bfc <display7SEG1+0xd4>)
 8000b44:	f001 f883 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, ((sevenSegTable[num]>>1)&0x01));
 8000b48:	4a2b      	ldr	r2, [pc, #172]	; (8000bf8 <display7SEG1+0xd0>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	085b      	lsrs	r3, r3, #1
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	4827      	ldr	r0, [pc, #156]	; (8000bfc <display7SEG1+0xd4>)
 8000b60:	f001 f875 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, ((sevenSegTable[num]>>2)&0x01));
 8000b64:	4a24      	ldr	r2, [pc, #144]	; (8000bf8 <display7SEG1+0xd0>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4820      	ldr	r0, [pc, #128]	; (8000bfc <display7SEG1+0xd4>)
 8000b7c:	f001 f867 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, ((sevenSegTable[num]>>3)&0x01));
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <display7SEG1+0xd0>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	2108      	movs	r1, #8
 8000b96:	4819      	ldr	r0, [pc, #100]	; (8000bfc <display7SEG1+0xd4>)
 8000b98:	f001 f859 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, ((sevenSegTable[num]>>4)&0x01));
 8000b9c:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <display7SEG1+0xd0>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	091b      	lsrs	r3, r3, #4
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <display7SEG1+0xd4>)
 8000bb4:	f001 f84b 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F0_GPIO_Port, F0_Pin, ((sevenSegTable[num]>>5)&0x01));
 8000bb8:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <display7SEG1+0xd0>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	095b      	lsrs	r3, r3, #5
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	2120      	movs	r1, #32
 8000bce:	480b      	ldr	r0, [pc, #44]	; (8000bfc <display7SEG1+0xd4>)
 8000bd0:	f001 f83d 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, ((sevenSegTable[num]>>6)&0x01));
 8000bd4:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <display7SEG1+0xd0>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	099b      	lsrs	r3, r3, #6
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	2140      	movs	r1, #64	; 0x40
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <display7SEG1+0xd4>)
 8000bec:	f001 f82f 	bl	8001c4e <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	08002cc8 	.word	0x08002cc8
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <display7SEG2>:

void display7SEG2(int num){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, ((sevenSegTable[num]>>0)&0x01));
 8000c08:	4a34      	ldr	r2, [pc, #208]	; (8000cdc <display7SEG2+0xdc>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	4831      	ldr	r0, [pc, #196]	; (8000ce0 <display7SEG2+0xe0>)
 8000c1c:	f001 f817 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, ((sevenSegTable[num]>>1)&0x01));
 8000c20:	4a2e      	ldr	r2, [pc, #184]	; (8000cdc <display7SEG2+0xdc>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	085b      	lsrs	r3, r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c38:	4829      	ldr	r0, [pc, #164]	; (8000ce0 <display7SEG2+0xe0>)
 8000c3a:	f001 f808 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, ((sevenSegTable[num]>>2)&0x01));
 8000c3e:	4a27      	ldr	r2, [pc, #156]	; (8000cdc <display7SEG2+0xdc>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	461a      	mov	r2, r3
 8000c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c56:	4822      	ldr	r0, [pc, #136]	; (8000ce0 <display7SEG2+0xe0>)
 8000c58:	f000 fff9 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, ((sevenSegTable[num]>>3)&0x01));
 8000c5c:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <display7SEG2+0xdc>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	08db      	lsrs	r3, r3, #3
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c74:	481a      	ldr	r0, [pc, #104]	; (8000ce0 <display7SEG2+0xe0>)
 8000c76:	f000 ffea 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, ((sevenSegTable[num]>>4)&0x01));
 8000c7a:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <display7SEG2+0xdc>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c92:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <display7SEG2+0xe0>)
 8000c94:	f000 ffdb 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, ((sevenSegTable[num]>>5)&0x01));
 8000c98:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <display7SEG2+0xdc>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	095b      	lsrs	r3, r3, #5
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <display7SEG2+0xe0>)
 8000cb2:	f000 ffcc 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, ((sevenSegTable[num]>>6)&0x01));
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <display7SEG2+0xdc>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	099b      	lsrs	r3, r3, #6
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cce:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <display7SEG2+0xe0>)
 8000cd0:	f000 ffbd 	bl	8001c4e <HAL_GPIO_WritePin>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	08002cc8 	.word	0x08002cc8
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <blinkDigit1>:

void blinkDigit1(int num1, int num2){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf4:	4816      	ldr	r0, [pc, #88]	; (8000d50 <blinkDigit1+0x6c>)
 8000cf6:	f000 ffaa 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d00:	4813      	ldr	r0, [pc, #76]	; (8000d50 <blinkDigit1+0x6c>)
 8000d02:	f000 ffa4 	bl	8001c4e <HAL_GPIO_WritePin>
	display7SEG1(num1/10);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <blinkDigit1+0x70>)
 8000d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0e:	1092      	asrs	r2, r2, #2
 8000d10:	17db      	asrs	r3, r3, #31
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff07 	bl	8000b28 <display7SEG1>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d20:	480b      	ldr	r0, [pc, #44]	; (8000d50 <blinkDigit1+0x6c>)
 8000d22:	f000 ff94 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2c:	4808      	ldr	r0, [pc, #32]	; (8000d50 <blinkDigit1+0x6c>)
 8000d2e:	f000 ff8e 	bl	8001c4e <HAL_GPIO_WritePin>
	display7SEG2(num2/10);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <blinkDigit1+0x70>)
 8000d36:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3a:	1092      	asrs	r2, r2, #2
 8000d3c:	17db      	asrs	r3, r3, #31
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5d 	bl	8000c00 <display7SEG2>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010800 	.word	0x40010800
 8000d54:	66666667 	.word	0x66666667

08000d58 <blinkDigit2>:

void blinkDigit2(int num1, int num2){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	481b      	ldr	r0, [pc, #108]	; (8000dd8 <blinkDigit2+0x80>)
 8000d6a:	f000 ff70 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d74:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <blinkDigit2+0x80>)
 8000d76:	f000 ff6a 	bl	8001c4e <HAL_GPIO_WritePin>
	display7SEG1(num1%10);
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <blinkDigit2+0x84>)
 8000d7e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d82:	1099      	asrs	r1, r3, #2
 8000d84:	17d3      	asrs	r3, r2, #31
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	460b      	mov	r3, r1
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	1ad1      	subs	r1, r2, r3
 8000d92:	4608      	mov	r0, r1
 8000d94:	f7ff fec8 	bl	8000b28 <display7SEG1>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9e:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <blinkDigit2+0x80>)
 8000da0:	f000 ff55 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <blinkDigit2+0x80>)
 8000dac:	f000 ff4f 	bl	8001c4e <HAL_GPIO_WritePin>
	display7SEG2(num2%10);
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <blinkDigit2+0x84>)
 8000db4:	fb83 1302 	smull	r1, r3, r3, r2
 8000db8:	1099      	asrs	r1, r3, #2
 8000dba:	17d3      	asrs	r3, r2, #31
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	1ad1      	subs	r1, r2, r3
 8000dc8:	4608      	mov	r0, r1
 8000dca:	f7ff ff19 	bl	8000c00 <display7SEG2>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	66666667 	.word	0x66666667

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de4:	f000 fc32 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f000 f812 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000dec:	f000 f84c 	bl	8000e88 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000df0:	f000 f896 	bl	8000f20 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <main+0x2c>)
 8000df6:	f001 fb93 	bl	8002520 <HAL_TIM_Base_Start_IT>

  initWaitingTime();
 8000dfa:	f7ff fe09 	bl	8000a10 <initWaitingTime>
  initVar();
 8000dfe:	f7ff fe1d 	bl	8000a3c <initVar>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic();
 8000e02:	f7ff fa4d 	bl	80002a0 <fsm_automatic>
	  fsm_manual();
 8000e06:	f7ff fbeb 	bl	80005e0 <fsm_manual>
	  fsm_automatic();
 8000e0a:	e7fa      	b.n	8000e02 <main+0x22>
 8000e0c:	20000128 	.word	0x20000128

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b090      	sub	sp, #64	; 0x40
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0318 	add.w	r3, r7, #24
 8000e1a:	2228      	movs	r2, #40	; 0x28
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 ff36 	bl	8002c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e36:	2301      	movs	r3, #1
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 ff32 	bl	8001cb0 <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e52:	f000 f8d5 	bl	8001000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 f99e 	bl	80021b0 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 f8c1 	bl	8001000 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3740      	adds	r7, #64	; 0x40
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_TIM2_Init+0x94>)
 8000ea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_TIM2_Init+0x94>)
 8000eae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000eb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_TIM2_Init+0x94>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_TIM2_Init+0x94>)
 8000ebc:	2209      	movs	r2, #9
 8000ebe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_TIM2_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_TIM2_Init+0x94>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <MX_TIM2_Init+0x94>)
 8000ece:	f001 fad7 	bl	8002480 <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ed8:	f000 f892 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <MX_TIM2_Init+0x94>)
 8000eea:	f001 fc6d 	bl	80027c8 <HAL_TIM_ConfigClockSource>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ef4:	f000 f884 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_TIM2_Init+0x94>)
 8000f06:	f001 fe35 	bl	8002b74 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f000 f876 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000128 	.word	0x20000128

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_GPIO_Init+0xbc>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <MX_GPIO_Init+0xbc>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_GPIO_Init+0xbc>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_GPIO_Init+0xbc>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <MX_GPIO_Init+0xbc>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_GPIO_Init+0xbc>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000f64:	2200      	movs	r2, #0
 8000f66:	f640 717e 	movw	r1, #3966	; 0xf7e
 8000f6a:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f6c:	f000 fe6f 	bl	8001c4e <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_Pin|B0_Pin|C0_Pin|D1_Pin
 8000f70:	2200      	movs	r2, #0
 8000f72:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000f76:	481b      	ldr	r0, [pc, #108]	; (8000fe4 <MX_GPIO_Init+0xc4>)
 8000f78:	f000 fe69 	bl	8001c4e <HAL_GPIO_WritePin>
                          |B1_Pin|C1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000f7c:	f640 737e 	movw	r3, #3966	; 0xf7e
 8000f80:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f96:	f000 fcc9 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin B0_Pin C0_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin A1_Pin
                           B1_Pin C1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|B0_Pin|C0_Pin|D1_Pin
 8000f9a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000f9e:	60bb      	str	r3, [r7, #8]
                          |E1_Pin|F1_Pin|G1_Pin|D0_Pin
                          |E0_Pin|F0_Pin|G0_Pin|A1_Pin
                          |B1_Pin|C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <MX_GPIO_Init+0xc4>)
 8000fb4:	f000 fcba 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000fb8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000fbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000fce:	f000 fcad 	bl	800192c <HAL_GPIO_Init>

}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	40010c00 	.word	0x40010c00

08000fe8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	timerRun();
 8000ff0:	f000 f8c0 	bl	8001174 <timerRun>
	getKeyInput();
 8000ff4:	f7ff f8d4 	bl	80001a0 <getKeyInput>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <setTimer1+0x20>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <setTimer1+0x24>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200000d8 	.word	0x200000d8
 8001030:	200000dc 	.word	0x200000dc

08001034 <setTimer2>:

void setTimer2(int duration){
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 800103c:	4a05      	ldr	r2, [pc, #20]	; (8001054 <setTimer2+0x20>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <setTimer2+0x24>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200000e0 	.word	0x200000e0
 8001058:	200000e4 	.word	0x200000e4

0800105c <setTimer3>:

void setTimer3(int duration){
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <setTimer3+0x20>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <setTimer3+0x24>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200000e8 	.word	0x200000e8
 8001080:	200000ec 	.word	0x200000ec

08001084 <setTimer4>:

void setTimer4(int duration){
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <setTimer4+0x20>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <setTimer4+0x24>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200000f0 	.word	0x200000f0
 80010a8:	200000f4 	.word	0x200000f4

080010ac <setTimer5>:

void setTimer5(int duration){
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 80010b4:	4a05      	ldr	r2, [pc, #20]	; (80010cc <setTimer5+0x20>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <setTimer5+0x24>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	200000f8 	.word	0x200000f8
 80010d0:	200000fc 	.word	0x200000fc

080010d4 <setTimer6>:

void setTimer6(int duration){
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 80010dc:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <setTimer6+0x20>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <setTimer6+0x24>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000100 	.word	0x20000100
 80010f8:	20000104 	.word	0x20000104

080010fc <setTimer7>:

void setTimer7(int duration){
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	timer7_counter = duration;
 8001104:	4a05      	ldr	r2, [pc, #20]	; (800111c <setTimer7+0x20>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <setTimer7+0x24>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000108 	.word	0x20000108
 8001120:	2000010c 	.word	0x2000010c

08001124 <setTimer8>:

void setTimer8(int duration){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	timer8_counter = duration;
 800112c:	4a05      	ldr	r2, [pc, #20]	; (8001144 <setTimer8+0x20>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <setTimer8+0x24>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000110 	.word	0x20000110
 8001148:	20000114 	.word	0x20000114

0800114c <setTimer9>:

void setTimer9(int duration){
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	timer9_counter = duration;
 8001154:	4a05      	ldr	r2, [pc, #20]	; (800116c <setTimer9+0x20>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <setTimer9+0x24>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000118 	.word	0x20000118
 8001170:	2000011c 	.word	0x2000011c

08001174 <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001178:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <timerRun+0x14c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	dd0b      	ble.n	8001198 <timerRun+0x24>
		timer1_counter--;
 8001180:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <timerRun+0x14c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3b01      	subs	r3, #1
 8001186:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <timerRun+0x14c>)
 8001188:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 800118a:	4b4d      	ldr	r3, [pc, #308]	; (80012c0 <timerRun+0x14c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <timerRun+0x24>
			timer1_flag = 1;
 8001192:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <timerRun+0x150>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001198:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <timerRun+0x154>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd0b      	ble.n	80011b8 <timerRun+0x44>
		timer2_counter--;
 80011a0:	4b49      	ldr	r3, [pc, #292]	; (80012c8 <timerRun+0x154>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <timerRun+0x154>)
 80011a8:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 80011aa:	4b47      	ldr	r3, [pc, #284]	; (80012c8 <timerRun+0x154>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <timerRun+0x44>
			timer2_flag = 1;
 80011b2:	4b46      	ldr	r3, [pc, #280]	; (80012cc <timerRun+0x158>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 80011b8:	4b45      	ldr	r3, [pc, #276]	; (80012d0 <timerRun+0x15c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	dd0b      	ble.n	80011d8 <timerRun+0x64>
		timer3_counter--;
 80011c0:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <timerRun+0x15c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4a42      	ldr	r2, [pc, #264]	; (80012d0 <timerRun+0x15c>)
 80011c8:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 80011ca:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <timerRun+0x15c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <timerRun+0x64>
			timer3_flag = 1;
 80011d2:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <timerRun+0x160>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <timerRun+0x164>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	dd0b      	ble.n	80011f8 <timerRun+0x84>
		timer4_counter--;
 80011e0:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <timerRun+0x164>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	4a3c      	ldr	r2, [pc, #240]	; (80012d8 <timerRun+0x164>)
 80011e8:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <timerRun+0x164>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <timerRun+0x84>
			timer4_flag = 1;
 80011f2:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <timerRun+0x168>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 80011f8:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <timerRun+0x16c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	dd0b      	ble.n	8001218 <timerRun+0xa4>
		timer5_counter--;
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <timerRun+0x16c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	4a36      	ldr	r2, [pc, #216]	; (80012e0 <timerRun+0x16c>)
 8001208:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 800120a:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <timerRun+0x16c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <timerRun+0xa4>
			timer5_flag = 1;
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <timerRun+0x170>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <timerRun+0x174>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	dd0b      	ble.n	8001238 <timerRun+0xc4>
		timer6_counter--;
 8001220:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <timerRun+0x174>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	4a30      	ldr	r2, [pc, #192]	; (80012e8 <timerRun+0x174>)
 8001228:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 800122a:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <timerRun+0x174>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <timerRun+0xc4>
			timer6_flag = 1;
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <timerRun+0x178>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <timerRun+0x17c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd0b      	ble.n	8001258 <timerRun+0xe4>
		timer7_counter--;
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <timerRun+0x17c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3b01      	subs	r3, #1
 8001246:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <timerRun+0x17c>)
 8001248:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <timerRun+0x17c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <timerRun+0xe4>
			timer7_flag = 1;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <timerRun+0x180>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <timerRun+0x184>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd0b      	ble.n	8001278 <timerRun+0x104>
		timer8_counter--;
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <timerRun+0x184>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3b01      	subs	r3, #1
 8001266:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <timerRun+0x184>)
 8001268:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <timerRun+0x184>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <timerRun+0x104>
			timer8_flag = 1;
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <timerRun+0x188>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <timerRun+0x18c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	dd0b      	ble.n	8001298 <timerRun+0x124>
		timer9_counter--;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <timerRun+0x18c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <timerRun+0x18c>)
 8001288:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <timerRun+0x18c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <timerRun+0x124>
			timer9_flag = 1;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <timerRun+0x190>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <timerRun+0x194>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	dd0b      	ble.n	80012b8 <timerRun+0x144>
		timer10_counter--;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <timerRun+0x194>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <timerRun+0x194>)
 80012a8:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <timerRun+0x194>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <timerRun+0x144>
			timer10_flag = 1;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <timerRun+0x198>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	200000d8 	.word	0x200000d8
 80012c4:	200000dc 	.word	0x200000dc
 80012c8:	200000e0 	.word	0x200000e0
 80012cc:	200000e4 	.word	0x200000e4
 80012d0:	200000e8 	.word	0x200000e8
 80012d4:	200000ec 	.word	0x200000ec
 80012d8:	200000f0 	.word	0x200000f0
 80012dc:	200000f4 	.word	0x200000f4
 80012e0:	200000f8 	.word	0x200000f8
 80012e4:	200000fc 	.word	0x200000fc
 80012e8:	20000100 	.word	0x20000100
 80012ec:	20000104 	.word	0x20000104
 80012f0:	20000108 	.word	0x20000108
 80012f4:	2000010c 	.word	0x2000010c
 80012f8:	20000110 	.word	0x20000110
 80012fc:	20000114 	.word	0x20000114
 8001300:	20000118 	.word	0x20000118
 8001304:	2000011c 	.word	0x2000011c
 8001308:	20000120 	.word	0x20000120
 800130c:	20000124 	.word	0x20000124

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_MspInit+0x5c>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a14      	ldr	r2, [pc, #80]	; (800136c <HAL_MspInit+0x5c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_MspInit+0x5c>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_MspInit+0x5c>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_MspInit+0x5c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_MspInit+0x5c>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_MspInit+0x60>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_MspInit+0x60>)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000

08001374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001384:	d113      	bne.n	80013ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_TIM_Base_MspInit+0x44>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <HAL_TIM_Base_MspInit+0x44>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_TIM_Base_MspInit+0x44>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	201c      	movs	r0, #28
 80013a4:	f000 fa8b 	bl	80018be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013a8:	201c      	movs	r0, #28
 80013aa:	f000 faa4 	bl	80018f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001402:	f000 f969 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <TIM2_IRQHandler+0x10>)
 8001412:	f001 f8d1 	bl	80025b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000128 	.word	0x20000128

08001420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <enableRed1>:
 *      Author: ASUS
 */
#include "main.h"
#include "traffic_light.h"

void enableRed1(){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2102      	movs	r1, #2
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <enableRed1+0x28>)
 8001436:	f000 fc0a 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2108      	movs	r1, #8
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <enableRed1+0x28>)
 8001440:	f000 fc05 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001444:	2201      	movs	r2, #1
 8001446:	2104      	movs	r1, #4
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <enableRed1+0x28>)
 800144a:	f000 fc00 	bl	8001c4e <HAL_GPIO_WritePin>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40010800 	.word	0x40010800

08001458 <enableYellow1>:

void enableYellow1(){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2102      	movs	r1, #2
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <enableYellow1+0x28>)
 8001462:	f000 fbf4 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2108      	movs	r1, #8
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <enableYellow1+0x28>)
 800146c:	f000 fbef 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2104      	movs	r1, #4
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <enableYellow1+0x28>)
 8001476:	f000 fbea 	bl	8001c4e <HAL_GPIO_WritePin>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40010800 	.word	0x40010800

08001484 <enableGreen1>:
void enableGreen1(){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001488:	2201      	movs	r2, #1
 800148a:	2102      	movs	r1, #2
 800148c:	4807      	ldr	r0, [pc, #28]	; (80014ac <enableGreen1+0x28>)
 800148e:	f000 fbde 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2108      	movs	r1, #8
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <enableGreen1+0x28>)
 8001498:	f000 fbd9 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2104      	movs	r1, #4
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <enableGreen1+0x28>)
 80014a2:	f000 fbd4 	bl	8001c4e <HAL_GPIO_WritePin>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40010800 	.word	0x40010800

080014b0 <enableRed2>:

void enableRed2(){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2110      	movs	r1, #16
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <enableRed2+0x28>)
 80014ba:	f000 fbc8 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <enableRed2+0x28>)
 80014c4:	f000 fbc3 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2120      	movs	r1, #32
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <enableRed2+0x28>)
 80014ce:	f000 fbbe 	bl	8001c4e <HAL_GPIO_WritePin>
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40010800 	.word	0x40010800

080014dc <enableYellow2>:
void enableYellow2(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2110      	movs	r1, #16
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <enableYellow2+0x28>)
 80014e6:	f000 fbb2 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2140      	movs	r1, #64	; 0x40
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <enableYellow2+0x28>)
 80014f0:	f000 fbad 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2120      	movs	r1, #32
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <enableYellow2+0x28>)
 80014fa:	f000 fba8 	bl	8001c4e <HAL_GPIO_WritePin>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40010800 	.word	0x40010800

08001508 <enableGreen2>:
void enableGreen2(){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800150c:	2201      	movs	r2, #1
 800150e:	2110      	movs	r1, #16
 8001510:	4807      	ldr	r0, [pc, #28]	; (8001530 <enableGreen2+0x28>)
 8001512:	f000 fb9c 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2140      	movs	r1, #64	; 0x40
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <enableGreen2+0x28>)
 800151c:	f000 fb97 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2120      	movs	r1, #32
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <enableGreen2+0x28>)
 8001526:	f000 fb92 	bl	8001c4e <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40010800 	.word	0x40010800

08001534 <toggleREDs>:

void toggleREDs(){
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8001538:	2102      	movs	r1, #2
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <toggleREDs+0x40>)
 800153c:	f000 fb9f 	bl	8001c7e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8001540:	2110      	movs	r1, #16
 8001542:	480c      	ldr	r0, [pc, #48]	; (8001574 <toggleREDs+0x40>)
 8001544:	f000 fb9b 	bl	8001c7e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2108      	movs	r1, #8
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <toggleREDs+0x40>)
 800154e:	f000 fb7e 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <toggleREDs+0x40>)
 8001558:	f000 fb79 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800155c:	2201      	movs	r2, #1
 800155e:	2104      	movs	r1, #4
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <toggleREDs+0x40>)
 8001562:	f000 fb74 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001566:	2201      	movs	r2, #1
 8001568:	2120      	movs	r1, #32
 800156a:	4802      	ldr	r0, [pc, #8]	; (8001574 <toggleREDs+0x40>)
 800156c:	f000 fb6f 	bl	8001c4e <HAL_GPIO_WritePin>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40010800 	.word	0x40010800

08001578 <toggleGREENs>:
void toggleGREENs(){
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 800157c:	2108      	movs	r1, #8
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <toggleGREENs+0x40>)
 8001580:	f000 fb7d 	bl	8001c7e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8001584:	2140      	movs	r1, #64	; 0x40
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <toggleGREENs+0x40>)
 8001588:	f000 fb79 	bl	8001c7e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2102      	movs	r1, #2
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <toggleGREENs+0x40>)
 8001592:	f000 fb5c 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2110      	movs	r1, #16
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <toggleGREENs+0x40>)
 800159c:	f000 fb57 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2104      	movs	r1, #4
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <toggleGREENs+0x40>)
 80015a6:	f000 fb52 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2120      	movs	r1, #32
 80015ae:	4802      	ldr	r0, [pc, #8]	; (80015b8 <toggleGREENs+0x40>)
 80015b0:	f000 fb4d 	bl	8001c4e <HAL_GPIO_WritePin>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40010800 	.word	0x40010800

080015bc <toggleYELLOWs>:
void toggleYELLOWs(){
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 80015c0:	2104      	movs	r1, #4
 80015c2:	480e      	ldr	r0, [pc, #56]	; (80015fc <toggleYELLOWs+0x40>)
 80015c4:	f000 fb5b 	bl	8001c7e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 80015c8:	2120      	movs	r1, #32
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <toggleYELLOWs+0x40>)
 80015cc:	f000 fb57 	bl	8001c7e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2108      	movs	r1, #8
 80015d4:	4809      	ldr	r0, [pc, #36]	; (80015fc <toggleYELLOWs+0x40>)
 80015d6:	f000 fb3a 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	4807      	ldr	r0, [pc, #28]	; (80015fc <toggleYELLOWs+0x40>)
 80015e0:	f000 fb35 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2102      	movs	r1, #2
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <toggleYELLOWs+0x40>)
 80015ea:	f000 fb30 	bl	8001c4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2110      	movs	r1, #16
 80015f2:	4802      	ldr	r0, [pc, #8]	; (80015fc <toggleYELLOWs+0x40>)
 80015f4:	f000 fb2b 	bl	8001c4e <HAL_GPIO_WritePin>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40010800 	.word	0x40010800

08001600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001600:	f7ff ff0e 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480b      	ldr	r0, [pc, #44]	; (8001634 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001606:	490c      	ldr	r1, [pc, #48]	; (8001638 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001608:	4a0c      	ldr	r2, [pc, #48]	; (800163c <LoopFillZerobss+0x16>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800161c:	4c09      	ldr	r4, [pc, #36]	; (8001644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f001 fb0d 	bl	8002c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162e:	f7ff fbd7 	bl	8000de0 <main>
  bx lr
 8001632:	4770      	bx	lr
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 800163c:	08002cec 	.word	0x08002cec
  ldr r2, =_sbss
 8001640:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001644:	20000174 	.word	0x20000174

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_Init+0x28>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_Init+0x28>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f923 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	200f      	movs	r0, #15
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fe52 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40022000 	.word	0x40022000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f93b 	bl	8001912 <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f903 	bl	80018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000040 	.word	0x20000040
 80016d0:	20000048 	.word	0x20000048
 80016d4:	20000044 	.word	0x20000044

080016d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x1c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x20>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a03      	ldr	r2, [pc, #12]	; (80016f8 <HAL_IncTick+0x20>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	20000048 	.word	0x20000048
 80016f8:	20000170 	.word	0x20000170

080016fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <HAL_GetTick+0x10>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000170 	.word	0x20000170

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	2b00      	cmp	r3, #0
 8001784:	db0b      	blt.n	800179e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	f003 021f 	and.w	r2, r3, #31
 800178c:	4906      	ldr	r1, [pc, #24]	; (80017a8 <__NVIC_EnableIRQ+0x34>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	2001      	movs	r0, #1
 8001796:	fa00 f202 	lsl.w	r2, r0, r2
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f7ff ff90 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff2d 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff42 	bl	8001758 <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff90 	bl	8001800 <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5f 	bl	80017ac <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff35 	bl	8001774 <__NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffa2 	bl	8001864 <SysTick_Config>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b08b      	sub	sp, #44	; 0x2c
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	e148      	b.n	8001bd2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001940:	2201      	movs	r2, #1
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	429a      	cmp	r2, r3
 800195a:	f040 8137 	bne.w	8001bcc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4aa3      	ldr	r2, [pc, #652]	; (8001bf0 <HAL_GPIO_Init+0x2c4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d05e      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001968:	4aa1      	ldr	r2, [pc, #644]	; (8001bf0 <HAL_GPIO_Init+0x2c4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d875      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 800196e:	4aa1      	ldr	r2, [pc, #644]	; (8001bf4 <HAL_GPIO_Init+0x2c8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d058      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001974:	4a9f      	ldr	r2, [pc, #636]	; (8001bf4 <HAL_GPIO_Init+0x2c8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d86f      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 800197a:	4a9f      	ldr	r2, [pc, #636]	; (8001bf8 <HAL_GPIO_Init+0x2cc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d052      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001980:	4a9d      	ldr	r2, [pc, #628]	; (8001bf8 <HAL_GPIO_Init+0x2cc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d869      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 8001986:	4a9d      	ldr	r2, [pc, #628]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d04c      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 800198c:	4a9b      	ldr	r2, [pc, #620]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d863      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 8001992:	4a9b      	ldr	r2, [pc, #620]	; (8001c00 <HAL_GPIO_Init+0x2d4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d046      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001998:	4a99      	ldr	r2, [pc, #612]	; (8001c00 <HAL_GPIO_Init+0x2d4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d85d      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d82a      	bhi.n	80019f8 <HAL_GPIO_Init+0xcc>
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d859      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 80019a6:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <HAL_GPIO_Init+0x80>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	08001a27 	.word	0x08001a27
 80019b0:	08001a01 	.word	0x08001a01
 80019b4:	08001a13 	.word	0x08001a13
 80019b8:	08001a55 	.word	0x08001a55
 80019bc:	08001a5b 	.word	0x08001a5b
 80019c0:	08001a5b 	.word	0x08001a5b
 80019c4:	08001a5b 	.word	0x08001a5b
 80019c8:	08001a5b 	.word	0x08001a5b
 80019cc:	08001a5b 	.word	0x08001a5b
 80019d0:	08001a5b 	.word	0x08001a5b
 80019d4:	08001a5b 	.word	0x08001a5b
 80019d8:	08001a5b 	.word	0x08001a5b
 80019dc:	08001a5b 	.word	0x08001a5b
 80019e0:	08001a5b 	.word	0x08001a5b
 80019e4:	08001a5b 	.word	0x08001a5b
 80019e8:	08001a5b 	.word	0x08001a5b
 80019ec:	08001a5b 	.word	0x08001a5b
 80019f0:	08001a09 	.word	0x08001a09
 80019f4:	08001a1d 	.word	0x08001a1d
 80019f8:	4a82      	ldr	r2, [pc, #520]	; (8001c04 <HAL_GPIO_Init+0x2d8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019fe:	e02c      	b.n	8001a5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e029      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	e024      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	3308      	adds	r3, #8
 8001a18:	623b      	str	r3, [r7, #32]
          break;
 8001a1a:	e01f      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	330c      	adds	r3, #12
 8001a22:	623b      	str	r3, [r7, #32]
          break;
 8001a24:	e01a      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	623b      	str	r3, [r7, #32]
          break;
 8001a32:	e013      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	611a      	str	r2, [r3, #16]
          break;
 8001a46:	e009      	b.n	8001a5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	615a      	str	r2, [r3, #20]
          break;
 8001a52:	e003      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e000      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          break;
 8001a5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2bff      	cmp	r3, #255	; 0xff
 8001a60:	d801      	bhi.n	8001a66 <HAL_GPIO_Init+0x13a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	e001      	b.n	8001a6a <HAL_GPIO_Init+0x13e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2bff      	cmp	r3, #255	; 0xff
 8001a70:	d802      	bhi.n	8001a78 <HAL_GPIO_Init+0x14c>
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	e002      	b.n	8001a7e <HAL_GPIO_Init+0x152>
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	3b08      	subs	r3, #8
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	210f      	movs	r1, #15
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	401a      	ands	r2, r3
 8001a90:	6a39      	ldr	r1, [r7, #32]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8090 	beq.w	8001bcc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aac:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a55      	ldr	r2, [pc, #340]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac4:	4a51      	ldr	r2, [pc, #324]	; (8001c0c <HAL_GPIO_Init+0x2e0>)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a49      	ldr	r2, [pc, #292]	; (8001c10 <HAL_GPIO_Init+0x2e4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00d      	beq.n	8001b0c <HAL_GPIO_Init+0x1e0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a48      	ldr	r2, [pc, #288]	; (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d007      	beq.n	8001b08 <HAL_GPIO_Init+0x1dc>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a47      	ldr	r2, [pc, #284]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_GPIO_Init+0x1d8>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e004      	b.n	8001b0e <HAL_GPIO_Init+0x1e2>
 8001b04:	2303      	movs	r3, #3
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x1e2>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_GPIO_Init+0x1e2>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b10:	f002 0203 	and.w	r2, r2, #3
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	4093      	lsls	r3, r2
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b1e:	493b      	ldr	r1, [pc, #236]	; (8001c0c <HAL_GPIO_Init+0x2e0>)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b38:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b46:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4933      	ldr	r1, [pc, #204]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b60:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	492d      	ldr	r1, [pc, #180]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4929      	ldr	r1, [pc, #164]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	4923      	ldr	r1, [pc, #140]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	491f      	ldr	r1, [pc, #124]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	4919      	ldr	r1, [pc, #100]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60cb      	str	r3, [r1, #12]
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4915      	ldr	r1, [pc, #84]	; (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	3301      	adds	r3, #1
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f47f aeaf 	bne.w	8001940 <HAL_GPIO_Init+0x14>
  }
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	372c      	adds	r7, #44	; 0x2c
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	10320000 	.word	0x10320000
 8001bf4:	10310000 	.word	0x10310000
 8001bf8:	10220000 	.word	0x10220000
 8001bfc:	10210000 	.word	0x10210000
 8001c00:	10120000 	.word	0x10120000
 8001c04:	10110000 	.word	0x10110000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	40010800 	.word	0x40010800
 8001c14:	40010c00 	.word	0x40010c00
 8001c18:	40011000 	.word	0x40011000
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e001      	b.n	8001c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	807b      	strh	r3, [r7, #2]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5e:	787b      	ldrb	r3, [r7, #1]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c64:	887a      	ldrh	r2, [r7, #2]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c6a:	e003      	b.n	8001c74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	041a      	lsls	r2, r3, #16
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	611a      	str	r2, [r3, #16]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c90:	887a      	ldrh	r2, [r7, #2]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	041a      	lsls	r2, r3, #16
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e26c      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8087 	beq.w	8001dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd0:	4b92      	ldr	r3, [pc, #584]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d00c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cdc:	4b8f      	ldr	r3, [pc, #572]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d112      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
 8001ce8:	4b8c      	ldr	r3, [pc, #560]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf4:	d10b      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf6:	4b89      	ldr	r3, [pc, #548]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d06c      	beq.n	8001ddc <HAL_RCC_OscConfig+0x12c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d168      	bne.n	8001ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e246      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x76>
 8001d18:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a7f      	ldr	r2, [pc, #508]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e02e      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x98>
 8001d2e:	4b7b      	ldr	r3, [pc, #492]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7a      	ldr	r2, [pc, #488]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b78      	ldr	r3, [pc, #480]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a77      	ldr	r2, [pc, #476]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e01d      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0xbc>
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a71      	ldr	r2, [pc, #452]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6e      	ldr	r2, [pc, #440]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d6c:	4b6b      	ldr	r3, [pc, #428]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6a      	ldr	r2, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a67      	ldr	r2, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fcb6 	bl	80016fc <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fcb2 	bl	80016fc <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e1fa      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0xe4>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fca2 	bl	80016fc <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fc9e 	bl	80016fc <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1e6      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x10c>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d063      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dea:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x18c>
 8001e02:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d116      	bne.n	8001e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e1ba      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4939      	ldr	r1, [pc, #228]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	e03a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d020      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fc57 	bl	80016fc <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e52:	f7ff fc53 	bl	80016fc <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e19b      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4927      	ldr	r1, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fc36 	bl	80016fc <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7ff fc32 	bl	80016fc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e17a      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d03a      	beq.n	8001f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d019      	beq.n	8001efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fc16 	bl	80016fc <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fc12 	bl	80016fc <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e15a      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 faa6 	bl	8002444 <RCC_Delay>
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f00:	f7ff fbfc 	bl	80016fc <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f06:	e00f      	b.n	8001f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff fbf8 	bl	80016fc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d908      	bls.n	8001f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e140      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	42420000 	.word	0x42420000
 8001f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	4b9e      	ldr	r3, [pc, #632]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e9      	bne.n	8001f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80a6 	beq.w	800208e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b97      	ldr	r3, [pc, #604]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b94      	ldr	r3, [pc, #592]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a93      	ldr	r2, [pc, #588]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	4b91      	ldr	r3, [pc, #580]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b8e      	ldr	r3, [pc, #568]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a8a      	ldr	r2, [pc, #552]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fbb9 	bl	80016fc <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff fbb5 	bl	80016fc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0fd      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b81      	ldr	r3, [pc, #516]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x312>
 8001fb4:	4b7b      	ldr	r3, [pc, #492]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a7a      	ldr	r2, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e02d      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x334>
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a72      	ldr	r2, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x356>
 8001fec:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a6c      	ldr	r2, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6213      	str	r3, [r2, #32]
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a69      	ldr	r2, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a63      	ldr	r2, [pc, #396]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff fb69 	bl	80016fc <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7ff fb65 	bl	80016fc <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0ab      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b57      	ldr	r3, [pc, #348]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCC_OscConfig+0x37e>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7ff fb53 	bl	80016fc <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7ff fb4f 	bl	80016fc <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e095      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a47      	ldr	r2, [pc, #284]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8081 	beq.w	800219a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d061      	beq.n	8002168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d146      	bne.n	800213a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_OscConfig+0x4fc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fb23 	bl	80016fc <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7ff fb1f 	bl	80016fc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e067      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e0:	d108      	bne.n	80020f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020e2:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	492d      	ldr	r1, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a19      	ldr	r1, [r3, #32]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	430b      	orrs	r3, r1
 8002106:	4927      	ldr	r1, [pc, #156]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x4fc>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7ff faf3 	bl	80016fc <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7ff faef 	bl	80016fc <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e037      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x46a>
 8002138:	e02f      	b.n	800219a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_RCC_OscConfig+0x4fc>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fadc 	bl	80016fc <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7ff fad8 	bl	80016fc <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e020      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x498>
 8002166:	e018      	b.n	800219a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e013      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	429a      	cmp	r2, r3
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420060 	.word	0x42420060

080021b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0d0      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b6a      	ldr	r3, [pc, #424]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d910      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b67      	ldr	r3, [pc, #412]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	4965      	ldr	r1, [pc, #404]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b8      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002224:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a52      	ldr	r2, [pc, #328]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800222e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	494d      	ldr	r1, [pc, #308]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d040      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d115      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e073      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e06b      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228e:	4b39      	ldr	r3, [pc, #228]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4936      	ldr	r1, [pc, #216]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a0:	f7ff fa2c 	bl	80016fc <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	e00a      	b.n	80022be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7ff fa28 	bl	80016fc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e053      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1eb      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d210      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	4922      	ldr	r1, [pc, #136]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e032      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4916      	ldr	r1, [pc, #88]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	490e      	ldr	r1, [pc, #56]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800233e:	f000 f821 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8002342:	4602      	mov	r2, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	490a      	ldr	r1, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	5ccb      	ldrb	r3, [r1, r3]
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1cc>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1d0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f98a 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
 8002378:	08002cd4 	.word	0x08002cd4
 800237c:	20000040 	.word	0x20000040
 8002380:	20000044 	.word	0x20000044

08002384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	b490      	push	{r4, r7}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb0>)
 800238c:	1d3c      	adds	r4, r7, #4
 800238e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002394:	f240 2301 	movw	r3, #513	; 0x201
 8002398:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x40>
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x46>
 80023c2:	e02d      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c6:	623b      	str	r3, [r7, #32]
      break;
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	0c9b      	lsrs	r3, r3, #18
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023d6:	4413      	add	r3, r2
 80023d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	0c5b      	lsrs	r3, r3, #17
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023f6:	4413      	add	r3, r2
 80023f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002402:	fb02 f203 	mul.w	r2, r2, r3
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	e004      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	623b      	str	r3, [r7, #32]
      break;
 800241e:	e002      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002422:	623b      	str	r3, [r7, #32]
      break;
 8002424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002426:	6a3b      	ldr	r3, [r7, #32]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bc90      	pop	{r4, r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	08002cb8 	.word	0x08002cb8
 8002438:	40021000 	.word	0x40021000
 800243c:	007a1200 	.word	0x007a1200
 8002440:	003d0900 	.word	0x003d0900

08002444 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <RCC_Delay+0x34>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0a      	ldr	r2, [pc, #40]	; (800247c <RCC_Delay+0x38>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0a5b      	lsrs	r3, r3, #9
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002460:	bf00      	nop
  }
  while (Delay --);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	60fa      	str	r2, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f9      	bne.n	8002460 <RCC_Delay+0x1c>
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	20000040 	.word	0x20000040
 800247c:	10624dd3 	.word	0x10624dd3

08002480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e041      	b.n	8002516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe ff64 	bl	8001374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f000 fa6a 	bl	8002998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d001      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e035      	b.n	80025a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_TIM_Base_Start_IT+0x90>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_TIM_Base_Start_IT+0x4e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d004      	beq.n	800256e <HAL_TIM_Base_Start_IT+0x4e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_TIM_Base_Start_IT+0x94>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d111      	bne.n	8002592 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b06      	cmp	r3, #6
 800257e:	d010      	beq.n	80025a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002590:	e007      	b.n	80025a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0201 	orr.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40000400 	.word	0x40000400

080025b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0202 	mvn.w	r2, #2
 80025e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f9b1 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f9a4 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f9b3 	bl	8002974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b04      	cmp	r3, #4
 8002620:	d122      	bne.n	8002668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b04      	cmp	r3, #4
 800262e:	d11b      	bne.n	8002668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0204 	mvn.w	r2, #4
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f987 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f97a 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f989 	bl	8002974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d122      	bne.n	80026bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b08      	cmp	r3, #8
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0208 	mvn.w	r2, #8
 800268c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2204      	movs	r2, #4
 8002692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f95d 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f950 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f95f 	bl	8002974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0210 	mvn.w	r2, #16
 80026e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2208      	movs	r2, #8
 80026e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f933 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f926 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f935 	bl	8002974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0201 	mvn.w	r2, #1
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fc56 	bl	8000fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d10e      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	2b80      	cmp	r3, #128	; 0x80
 8002756:	d107      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa67 	bl	8002c36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d107      	bne.n	8002794 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800278c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8f9 	bl	8002986 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d10e      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d107      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0220 	mvn.w	r2, #32
 80027b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fa32 	bl	8002c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIM_ConfigClockSource+0x18>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0b3      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x180>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002806:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002818:	d03e      	beq.n	8002898 <HAL_TIM_ConfigClockSource+0xd0>
 800281a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281e:	f200 8087 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x168>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	f000 8085 	beq.w	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	d87f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x168>
 8002830:	2b70      	cmp	r3, #112	; 0x70
 8002832:	d01a      	beq.n	800286a <HAL_TIM_ConfigClockSource+0xa2>
 8002834:	2b70      	cmp	r3, #112	; 0x70
 8002836:	d87b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x168>
 8002838:	2b60      	cmp	r3, #96	; 0x60
 800283a:	d050      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x116>
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d877      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x168>
 8002840:	2b50      	cmp	r3, #80	; 0x50
 8002842:	d03c      	beq.n	80028be <HAL_TIM_ConfigClockSource+0xf6>
 8002844:	2b50      	cmp	r3, #80	; 0x50
 8002846:	d873      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x168>
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d058      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x136>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d86f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x168>
 8002850:	2b30      	cmp	r3, #48	; 0x30
 8002852:	d064      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x156>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d86b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x168>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d060      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x156>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d867      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x168>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x156>
 8002864:	2b10      	cmp	r3, #16
 8002866:	d05a      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002868:	e062      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f000 f95c 	bl	8002b36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800288c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	609a      	str	r2, [r3, #8]
      break;
 8002896:	e04e      	b.n	8002936 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6899      	ldr	r1, [r3, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f000 f945 	bl	8002b36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ba:	609a      	str	r2, [r3, #8]
      break;
 80028bc:	e03b      	b.n	8002936 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 f8bc 	bl	8002a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2150      	movs	r1, #80	; 0x50
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f913 	bl	8002b02 <TIM_ITRx_SetConfig>
      break;
 80028dc:	e02b      	b.n	8002936 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f000 f8da 	bl	8002aa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2160      	movs	r1, #96	; 0x60
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f903 	bl	8002b02 <TIM_ITRx_SetConfig>
      break;
 80028fc:	e01b      	b.n	8002936 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	461a      	mov	r2, r3
 800290c:	f000 f89c 	bl	8002a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2140      	movs	r1, #64	; 0x40
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f8f3 	bl	8002b02 <TIM_ITRx_SetConfig>
      break;
 800291c:	e00b      	b.n	8002936 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f000 f8ea 	bl	8002b02 <TIM_ITRx_SetConfig>
        break;
 800292e:	e002      	b.n	8002936 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002930:	bf00      	nop
 8002932:	e000      	b.n	8002936 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002934:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <TIM_Base_SetConfig+0xa8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d007      	beq.n	80029c0 <TIM_Base_SetConfig+0x28>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d003      	beq.n	80029c0 <TIM_Base_SetConfig+0x28>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <TIM_Base_SetConfig+0xac>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <TIM_Base_SetConfig+0xa8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <TIM_Base_SetConfig+0x52>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d003      	beq.n	80029ea <TIM_Base_SetConfig+0x52>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <TIM_Base_SetConfig+0xac>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d108      	bne.n	80029fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <TIM_Base_SetConfig+0xa8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d103      	bne.n	8002a30 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	615a      	str	r2, [r3, #20]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	40012c00 	.word	0x40012c00
 8002a44:	40000400 	.word	0x40000400

08002a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f023 0201 	bic.w	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f023 030a 	bic.w	r3, r3, #10
 8002a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f023 0210 	bic.w	r2, r3, #16
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ace:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	031b      	lsls	r3, r3, #12
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ae0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	621a      	str	r2, [r3, #32]
}
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f043 0307 	orr.w	r3, r3, #7
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	609a      	str	r2, [r3, #8]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b087      	sub	sp, #28
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	021a      	lsls	r2, r3, #8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	609a      	str	r2, [r3, #8]
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e041      	b.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd8:	d004      	beq.n	8002be4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10c      	bne.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	40000400 	.word	0x40000400

08002c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <__libc_init_array>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	2600      	movs	r6, #0
 8002c4c:	4d0c      	ldr	r5, [pc, #48]	; (8002c80 <__libc_init_array+0x38>)
 8002c4e:	4c0d      	ldr	r4, [pc, #52]	; (8002c84 <__libc_init_array+0x3c>)
 8002c50:	1b64      	subs	r4, r4, r5
 8002c52:	10a4      	asrs	r4, r4, #2
 8002c54:	42a6      	cmp	r6, r4
 8002c56:	d109      	bne.n	8002c6c <__libc_init_array+0x24>
 8002c58:	f000 f822 	bl	8002ca0 <_init>
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	4d0a      	ldr	r5, [pc, #40]	; (8002c88 <__libc_init_array+0x40>)
 8002c60:	4c0a      	ldr	r4, [pc, #40]	; (8002c8c <__libc_init_array+0x44>)
 8002c62:	1b64      	subs	r4, r4, r5
 8002c64:	10a4      	asrs	r4, r4, #2
 8002c66:	42a6      	cmp	r6, r4
 8002c68:	d105      	bne.n	8002c76 <__libc_init_array+0x2e>
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c70:	4798      	blx	r3
 8002c72:	3601      	adds	r6, #1
 8002c74:	e7ee      	b.n	8002c54 <__libc_init_array+0xc>
 8002c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7a:	4798      	blx	r3
 8002c7c:	3601      	adds	r6, #1
 8002c7e:	e7f2      	b.n	8002c66 <__libc_init_array+0x1e>
 8002c80:	08002ce4 	.word	0x08002ce4
 8002c84:	08002ce4 	.word	0x08002ce4
 8002c88:	08002ce4 	.word	0x08002ce4
 8002c8c:	08002ce8 	.word	0x08002ce8

08002c90 <memset>:
 8002c90:	4603      	mov	r3, r0
 8002c92:	4402      	add	r2, r0
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d100      	bne.n	8002c9a <memset+0xa>
 8002c98:	4770      	bx	lr
 8002c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c9e:	e7f9      	b.n	8002c94 <memset+0x4>

08002ca0 <_init>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	bf00      	nop
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr

08002cac <_fini>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	bf00      	nop
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr
